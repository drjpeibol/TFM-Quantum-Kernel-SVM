%------------------------------------------------------------------------
%  Sixteen_qbit_sample_generation_v0 : program to check the data generation 
%                                    explaind in  the paper J.R. Click 
%                                    "Covariant quantum kernels 
%                                     for data with group structure" 2022
%---------------------------------------------------------------------------

function Sixteen_qbit_sample_generation_v0
%Symbolic calculations
symbolic = 0;  %Use 1 to get the body of the U function
test_number = 1; % Loops to test functions
samples = 20; % Number of samples to generate
eps = 0.01; %Variance of the random error applyed
seed = 1111;

rng(seed);

% Identity 
I = [ 1 0 
      0 1 ];
% Pauli Matrices
X = [ 0 1
      1 0 ];
Y = [ 0  -1i
      1i   0];
Z = [  1  0 
       0 -1 ];


%-------------------------------------------------------------------------
% Symbolic generation of
% kron( D(theta_1, theta_2,0 ), D(theta_3, theta_4,0))

    if symbolic == 1
    syms theta_1
    Rot1 = [ cos(theta_1/2)    -1i*sin(theta_1/2);
            -1i*sin(theta_1/2)    cos(theta_1/2)  ];

    syms theta_2
    Rot2 = [ exp(-1i*theta_2/2)    0
            0              exp(1i*theta_2/2) ]; 
    syms theta_3
    Rot3 = [ cos(theta_3/2)    -1i*sin(theta_3/2);
            -1i*sin(theta_3/2)    cos(theta_3/2)  ];

    syms theta_4
    Rot4 = [ exp(-1i*theta_4/2)    0
            0              exp(1i*theta_4/2) ];

    Result = kron(Rot1*Rot2, Rot3*Rot4);

    fprintf ('Tensor product decompositon:\n');

    fprintf("M(1,1) = %s; \nM(1,2)= %s;\nM(1,3) = %s;\nM(1,4) = %s;\n",....
             Result(1,1), Result(1,2), Result(1,3), Result(1,4)); 
    fprintf("M(2,1) = %s; \nM(2,2)= %s;\nM(2,3) = %s;\nM(2,4) = %s;\n",....
             Result(2,1), Result(2,2), Result(2,3), Result(2,4));
    fprintf("M(3,1) = %s; \nM(3,2)= %s;\nM(3,3) = %s;\nM(3,4) = %s;\n",....
             Result(3,1), Result(3,2), Result(3,3), Result(3,4)); 
    fprintf("M(4,1) = %s; \nM(4,2)= %s;\nM(4,3) = %s;\nM(4,4) = %s;\n",....
             Result(4,1), Result(4,2), Result(4,3), Result(4,4));    
                 
    end
%-------------------------------------------------------------------------

%-------------------------------------------------------------------- 
%
%  Use of Ten qbits for the architecture:
%                    6
%                    |
%  0 --- 1 --- 4 --- 7 --- 10 --- 12 --- 15
%        |                        |
%        2                        13
%        |                        |
%        3 --- 5 --- 8 --- 11 --- 14
%                    |
%                    9
%
%  Therefore, we have nine cases:
%  X0Z1
%  X1Z4
%  X4Z7
%  X6Z7
%  X7Z10
%  X10Z12
%  X12Z15
%  X1Z2
%  X2Z3
%  X3Z5
%  X5Z8
%  X8Z9
%  X8Z11
%  X11Z14
%  X13Z14
%  X12Z13
%--------------------------------------------------------------------

coset = [ 'C-' 
          'C+' ];

for k = 1:test_number
 for j = 1:2
    
    % Indicate the coset
    fprintf ('Coset %s\n', coset(j,:));
    
    % Generate random angles  
    theta_1 = random('uniform', -pi/2, pi/2);
    theta_2 = random('uniform', -pi/2, pi/2);
    theta_3 = random('uniform', -pi/2, pi/2);
    theta_4 = random('uniform', -pi/2, pi/2);
    theta_5 = random('uniform', -pi/2, pi/2);
    theta_6 = random('uniform', -pi/2, pi/2);
    theta_7 = random('uniform', -pi/2, pi/2);
    theta_8 = random('uniform', -pi/2, pi/2);
    theta_9 = random('uniform', -pi/2, pi/2);
    theta_10 = random('uniform', -pi/2, pi/2);
    theta_11 = random('uniform', -pi/2, pi/2);
    theta_12 = random('uniform', -pi/2, pi/2);
    theta_13 = random('uniform', -pi/2, pi/2);
    theta_14 = random('uniform', -pi/2, pi/2);
    theta_15 = random('uniform', -pi/2, pi/2);
    theta_16 = random('uniform', -pi/2, pi/2);
    theta_17 = random('uniform', -pi/2, pi/2);
    theta_18 = random('uniform', -pi/2, pi/2);
    theta_19 = random('uniform', -pi/2, pi/2);
    theta_20 = random('uniform', -pi/2, pi/2);
    theta_21 = random('uniform', -pi/2, pi/2);
    theta_22 = random('uniform', -pi/2, pi/2);
    theta_23 = random('uniform', -pi/2, pi/2);
    theta_24 = random('uniform', -pi/2, pi/2);
    theta_25 = random('uniform', -pi/2, pi/2);
    theta_26 = random('uniform', -pi/2, pi/2);
    theta_27 = random('uniform', -pi/2, pi/2);
    theta_28 = random('uniform', -pi/2, pi/2);
    theta_29 = random('uniform', -pi/2, pi/2);
    theta_30 = random('uniform', -pi/2, pi/2);
    theta_31 = random('uniform', -pi/2, pi/2);
    theta_32 = random('uniform', -pi/2, pi/2);
    
    % Identity 
    Sample = [ theta_1, theta_2,...
               theta_3, theta_4,...
               theta_5, theta_6,...
               theta_7, theta_8,...
               theta_9, theta_10,...
               theta_11,theta_12,...
               theta_13,theta_14,...
               theta_15,theta_16,...
               theta_17,theta_18,...
               theta_19,theta_20,...
               theta_21, theta_22,...
               theta_23, theta_24,...
               theta_25, theta_26,...
               theta_27, theta_28,...
               theta_29, theta_30,...
               theta_31,theta_32];

    fprintf ('Sample R*I    =  %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f\n',...
              Sample); 
    %----------------------------------------------------------------
    % First case: X0Z1
    % ---  X --- D(0, theta_1, theta_2, 0) --- 
    % ---  Z --- D(0, theta_3, theta_4, 0) --- 
    % ---- I ----D(0, theta_5, theta_6, 0) ---
    % ---- I ----D(0, theta_7, theta_8, 0) ---
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_16, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) ---
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---

    
    % Rotations  
    R = kron(D([0, theta_1, theta_2, 0], I, X, Z, X), ...
         kron(D([0, theta_3, theta_4, 0], I, X, Z, X), ...
           kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron(D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron(D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron(D([0, theta_11, theta_12, 0], I, X, Z, X), ...
                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
                           kron(D([0, theta_17, theta_18, 0], I, X, Z, X), ...
                             kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));
    % Stabilizer 
    X0Z1 = kron(X, ...
            kron(Z, ...
                kron(I, ...
                    kron(I, ...
                        kron(I, ...
                            kron (I, ...
                               kron(I, ...
                                 kron(I, ...
                                    kron (I, ...
                                        kron(I, ...
                                            kron(I, ...
                                                kron(I, ...
                                                    kron (I, ...
                                                        kron(I, ...
                                                            kron(I, ...
                                                                    I...
                    )))))))))))))));
    
    A = R*X0Z1;
    
    % We parametrise the matrix by using first two qbits 
    M0 = kron(D([0, theta_1, theta_2, 0], I, X, Z, X), ...
           D([0, theta_3, theta_4, 0], I, X, Z, X)     );
    
    S0= kron(X,Z);
    B0 = M0*S0;
    
    % Recalculate angles 
    estimated_angles = DxD_Euler_angles (B0);
    

    % Equivalent Matrix 
    % --- D(0, estimated_angles(1),estimated_angles(2), 0) --- 
    % --- D(0, estimated_angles(3),estimated_angles(4), 0) --- 
    % ---- I ----D(0, theta_5, theta_6, 0) ---
    % ---- I ----D(0, theta_7, theta_8, 0) ---
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_16, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) ---
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---
    
                                                   
    A0 = kron(D([0,estimated_angles(1),estimated_angles(2), 0], I,X,Z,X), ...
          kron( D([0,estimated_angles(3),estimated_angles(4), 0], I,X,Z,X), ...
           kron( D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron( D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron( D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron( D([0, theta_11, theta_12, 0], I, X, Z, X),   ...
                     kron( D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                        kron( D([0, theta_15, theta_16, 0], I, X, Z, X), ... 
                            kron( D([0, theta_17, theta_18, 0], I, X, Z, X),   ...
                              kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));                                           
    
    %test 
    if norm (A-A0)  >= 0.001
         fprintf ('Matrix angles estgimation warning\n');
         return
    else

    end
    
    % Therefore, sample is 
    Sample_0 = [ estimated_angles(1),estimated_angles(2), ...
               estimated_angles(3),estimated_angles(4), ...
               theta_5, theta_6, ...
               theta_7, theta_8, ...
               theta_9, theta_10,...
               theta_11,theta_12,...
               theta_13, theta_14,...
               theta_15, theta_16,...
               theta_17,theta_18,...
               theta_19,theta_20,...
               theta_21, theta_22,...
               theta_23, theta_24,...
               theta_25, theta_26,...
               theta_27, theta_28,...
               theta_29, theta_30,...
               theta_31,theta_32];

    fprintf ('Sample R*X0Z1   =  %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f\n',...
              Sample_0); 
    if j == 1
        writematrix ([Sample_0,j],'Data_16qubit.csv','WriteMode','overwrite');
    else 
        writematrix ([Sample_0,j],'Data_16qubit.csv','WriteMode','append');
    end 
    %----
    %  End of first case 
    %
    %----------------------------------------------------------------
    % Second case: X1Z2
    % ---  I --- D(0, theta_1, theta_2, 0) --- 
    % ---  X --- D(0, theta_3, theta_4, 0) --- 
    % ---- Z ----D(0, theta_5, theta_6, 0) ---
    % ---- I ----D(0, theta_7, theta_8, 0) ---
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_16, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) ---
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---

        % Rotations  
    R = kron(D([0, theta_1, theta_2, 0], I, X, Z, X), ...
         kron(D([0, theta_3, theta_4, 0], I, X, Z, X), ...
           kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron(D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron(D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron(D([0, theta_11, theta_12, 0], I, X, Z, X), ...
                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
                           kron(D([0, theta_17, theta_18, 0], I, X, Z, X), ...
                             kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));
    % Stabilizer 
    X1Z2 = kron(I, ...
            kron(X, ...
                kron(Z, ...
                    kron(I, ...
                        kron(I, ...
                            kron (I, ...
                               kron(I, ...
                                 kron(I, ...
                                    kron (I, ...
                                        kron(I, ...
                                            kron(I, ...
                                                kron(I, ...
                                                    kron (I, ...
                                                        kron(I, ...
                                                            kron(I, ...
                                                                    I...
                    )))))))))))))));
    
    A = R*X1Z2;
    
    % We parametrise the matrix by using first two qbits 
    M0 = kron(D([0, theta_3, theta_4, 0], I, X, Z, X), ...
           D([0, theta_5, theta_6, 0], I, X, Z, X)     );
    
    S0= kron(X,Z);
    B0 = M0*S0;
    
    % Recalculate angles 
    estimated_angles = DxD_Euler_angles (B0);
    

    % Equivalent Matrix 
    % --- I ----D(0, theta_1, theta_2, 0) --- 
    % --- D(0, estimated_angles(1),estimated_angles(2), 0) --- 
    % ----D(0, estimated_angles(3),estimated_angles(4), 0) ---
    % ---- I ----D(0, theta_7, theta_8, 0) ---
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_16, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) ---
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---
    
                                                   
    A0 = kron(D([0, theta_1, theta_2, 0], I,X,Z,X), ...
          kron( D([0,estimated_angles(1),estimated_angles(2), 0], I,X,Z,X), ...
           kron( D([0,estimated_angles(3),estimated_angles(4), 0], I, X, Z, X), ...
             kron( D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron( D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron( D([0, theta_11, theta_12, 0], I, X, Z, X),   ...
                     kron( D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                        kron( D([0, theta_15, theta_16, 0], I, X, Z, X), ... 
                            kron( D([0, theta_17, theta_18, 0], I, X, Z, X),   ...
                              kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));                                           
    
    %test 
    if norm (A-A0)  >= 0.001
         fprintf ('Matrix angles estgimation warning\n');
         return
    else

    end
    
    % Therefore, sample is 
    Sample_1 = [ theta_1, theta_2, ...
               estimated_angles(1),estimated_angles(2), ...
               estimated_angles(3),estimated_angles(4), ...
               theta_7, theta_8, ...
               theta_9, theta_10,...
               theta_11,theta_12,...
               theta_13, theta_14,...
               theta_15, theta_16,...
               theta_17,theta_18,...
               theta_19,theta_20,...
               theta_21, theta_22,...
               theta_23, theta_24,...
               theta_25, theta_26,...
               theta_27, theta_28,...
               theta_29, theta_30,...
               theta_31,theta_32];

    fprintf ('Sample R*X1Z2   =  %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f\n',...
              Sample_1); 

    writematrix ([Sample_1,j],'Data_16qubit.csv','WriteMode','append');

    %
    % End of second case
    %-------------------------------------------------------------------
    %----------------------------------------------------------------
    % Third case: X2Z3
    % ---  I --- D(0, theta_1, theta_2, 0) --- 
    % ---  I --- D(0, theta_3, theta_4, 0) --- 
    % ---- X ----D(0, theta_5, theta_6, 0) ---
    % ---- Z ----D(0, theta_7, theta_8, 0) ---
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_16, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) ---
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---

        % Rotations  
    R = kron(D([0, theta_1, theta_2, 0], I, X, Z, X), ...
         kron(D([0, theta_3, theta_4, 0], I, X, Z, X), ...
           kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron(D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron(D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron(D([0, theta_11, theta_12, 0], I, X, Z, X), ...
                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
                           kron(D([0, theta_17, theta_18, 0], I, X, Z, X), ...
                             kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));
    % Stabilizer 
    X2Z3 = kron(I, ...
            kron(I, ...
                kron(X, ...
                    kron(Z, ...
                        kron(I, ...
                            kron (I, ...
                               kron(I, ...
                                 kron(I, ...
                                    kron (I, ...
                                        kron(I, ...
                                            kron(I, ...
                                                kron(I, ...
                                                    kron (I, ...
                                                        kron(I, ...
                                                            kron(I, ...
                                                                    I...
                    )))))))))))))));
    
    A = R*X2Z3;
    
    % We parametrise the matrix by using first two qbits 
    M0 = kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
           D([0, theta_7, theta_8, 0], I, X, Z, X)     );
    
    S0= kron(X,Z);
    B0 = M0*S0;
    
    % Recalculate angles 
    estimated_angles = DxD_Euler_angles (B0);
    

    % Equivalent Matrix 
    % --- I ----D(0, theta_1, theta_2, 0) --- 
    % --- I ----D(0, theta_3, theta_4, 0) --- 
    % ----D(0, estimated_angles(1),estimated_angles(2), 0) ---
    % --- D(0, estimated_angles(3),estimated_angles(4), 0) --- 
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_16, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) ---
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---
    
                                                   
    A0 = kron(D([0, theta_1, theta_2, 0], I,X,Z,X), ...
          kron( D([0,theta_3, theta_4, 0], I,X,Z,X), ...
           kron( D([0,estimated_angles(1),estimated_angles(2), 0], I, X, Z, X), ...
             kron( D([0,estimated_angles(3),estimated_angles(4), 0], I, X, Z, X), ...
                kron( D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron( D([0, theta_11, theta_12, 0], I, X, Z, X),   ...
                     kron( D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                        kron( D([0, theta_15, theta_16, 0], I, X, Z, X), ... 
                            kron( D([0, theta_17, theta_18, 0], I, X, Z, X),   ...
                              kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));                                           
    
    %test 
    if norm (A-A0)  >= 0.001
         fprintf ('Matrix angles estgimation warning\n');
         return
    else

    end
    
    % Therefore, sample is 
    Sample_2 = [ theta_1, theta_2, ...
               theta_3, theta_4, ...
               estimated_angles(1),estimated_angles(2), ...
               estimated_angles(3),estimated_angles(4), ...
               theta_9, theta_10,...
               theta_11,theta_12,...
               theta_13, theta_14,...
               theta_15, theta_16,...
               theta_17,theta_18,...
               theta_19,theta_20,...
               theta_21, theta_22,...
               theta_23, theta_24,...
               theta_25, theta_26,...
               theta_27, theta_28,...
               theta_29, theta_30,...
               theta_31,theta_32];

    fprintf ('Sample R*X2Z3   =  %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f\n',...
              Sample_2); 

    writematrix ([Sample_2,j],'Data_16qubit.csv','WriteMode','append');

    % End of third case 
    %---------------------------------------------------------------------
    %----------------------------------------------------------------
    % Fourth case: X8Z9
    % ---  I --- D(0, theta_1, theta_2, 0) --- 
    % ---  I --- D(0, theta_3, theta_4, 0) --- 
    % ---- I ----D(0, theta_5, theta_6, 0) ---
    % ---- I ----D(0, theta_7, theta_8, 0) ---
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_16, 0) ---
    % ---- X ----D(0, theta_17, theta_18, 0) ---
    % ---- Z ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) ---
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---

        % Rotations  
    R = kron(D([0, theta_1, theta_2, 0], I, X, Z, X), ...
         kron(D([0, theta_3, theta_4, 0], I, X, Z, X), ...
           kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron(D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron(D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron(D([0, theta_11, theta_12, 0], I, X, Z, X), ...
                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
                           kron(D([0, theta_17, theta_18, 0], I, X, Z, X), ...
                             kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));
    % Stabilizer 
    X8Z9 = kron(I, ...
            kron(I, ...
                kron(I, ...
                    kron(I, ...
                        kron(I, ...
                            kron(I, ...
                               kron(I, ...
                                 kron(I, ...
                                    kron (X, ...
                                        kron(Z, ...
                                            kron(I, ...
                                                kron(I, ...
                                                    kron (I, ...
                                                        kron(I, ...
                                                            kron(I, ...
                                                                    I...
                    )))))))))))))));
    
    A = R*X8Z9;
    
    % We parametrise the matrix by using first two qbits 
    M0 = kron(D([0, theta_17, theta_18, 0], I, X, Z, X), ...
           D([0, theta_19, theta_20, 0], I, X, Z, X)     );
    
    S0= kron(X,Z);
    B0 = M0*S0;
    
    % Recalculate angles 
    estimated_angles = DxD_Euler_angles (B0);
    

    % Equivalent Matrix 
    % --- I ----D(0, theta_1, theta_2, 0) --- 
    % --- I ----D(0, theta_3, theta_4, 0) --- 
    % --- I ----D(0, theta_5, theta_6, 0) --- 
    % --- I ----D(0, theta_7, theta_8, 0) --- 
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_16, 0) ---
    % ----D(0, estimated_angles(1),estimated_angles(2), 0) ---
    % --- D(0, estimated_angles(3),estimated_angles(4), 0) --- 
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) ---
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---
    
                                                   
    A0 = kron(D([0, theta_1, theta_2, 0], I,X,Z,X), ...
          kron( D([0,theta_3, theta_4, 0], I,X,Z,X), ...
           kron( D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron( D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron( D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron( D([0, theta_11, theta_12, 0], I, X, Z, X),   ...
                     kron( D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                        kron( D([0, theta_15, theta_16, 0], I, X, Z, X), ... 
                            kron( D([0, estimated_angles(1),estimated_angles(2), 0], I, X, Z, X),   ...
                              kron(D([0, estimated_angles(3),estimated_angles(4), 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));                                           
    
    %test 
    if norm (A-A0)  >= 0.001
         fprintf ('Matrix angles estgimation warning\n');
         return
    else

    end
    
    % Therefore, sample is 
    Sample_3 = [ theta_1, theta_2, ...
               theta_3, theta_4, ...
               theta_5, theta_6,...
               theta_7,theta_8,...
               theta_9, theta_10,...
               theta_11,theta_12,...
               theta_13, theta_14,...
               theta_15, theta_16,...
               estimated_angles(1),estimated_angles(2), ...
               estimated_angles(3),estimated_angles(4), ...
               theta_21, theta_22,...
               theta_23, theta_24,...
               theta_25, theta_26,...
               theta_27, theta_28,...
               theta_29, theta_30,...
               theta_31,theta_32];

    fprintf ('Sample R*X8Z9   =  %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f\n',...
              Sample_3); 

    writematrix ([Sample_3,j],'Data_16qubit.csv','WriteMode','append');

    % End of fourth case 
    %---------------------------------------------------------------------
    % Fifth case: X13Z14
    % ---  I --- D(0, theta_1, theta_2, 0) --- 
    % ---  I --- D(0, theta_3, theta_4, 0) --- 
    % ---- I ----D(0, theta_5, theta_6, 0) ---
    % ---- I ----D(0, theta_7, theta_8, 0) ---
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_16, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- X ----D(0, theta_27, theta_28, 0) ---
    % ---- Z ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---

        % Rotations  
    R = kron(D([0, theta_1, theta_2, 0], I, X, Z, X), ...
         kron(D([0, theta_3, theta_4, 0], I, X, Z, X), ...
           kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron(D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron(D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron(D([0, theta_11, theta_12, 0], I, X, Z, X), ...
                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
                           kron(D([0, theta_17, theta_18, 0], I, X, Z, X), ...
                             kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));
    % Stabilizer 
    X13Z14 = kron(I, ...
            kron(I, ...
                kron(I, ...
                    kron(I, ...
                        kron(I, ...
                            kron(I, ...
                               kron(I, ...
                                 kron(I, ...
                                    kron (I, ...
                                        kron(I, ...
                                            kron(I, ...
                                                kron(I, ...
                                                    kron (I, ...
                                                        kron(X, ...
                                                            kron(Z, ...
                                                                    I...
                    )))))))))))))));
    
    A = R*X13Z14;
    
    % We parametrise the matrix by using first two qbits 
    M0 = kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
           D([0, theta_29, theta_30, 0], I, X, Z, X)     );
    
    S0= kron(X,Z);
    B0 = M0*S0;
    
    % Recalculate angles 
    estimated_angles = DxD_Euler_angles (B0);
    

    % Equivalent Matrix 
    % --- I ----D(0, theta_1, theta_2, 0) --- 
    % --- I ----D(0, theta_3, theta_4, 0) --- 
    % --- I ----D(0, theta_5, theta_6, 0) --- 
    % --- I ----D(0, theta_7, theta_8, 0) --- 
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_16, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ----D(0, estimated_angles(1),estimated_angles(2), 0) ---
    % --- D(0, estimated_angles(3),estimated_angles(4), 0) --- 
    % ---- I ----D(0, theta_31, theta_32, 0) ---
    
                                                   
    A0 = kron(D([0, theta_1, theta_2, 0], I,X,Z,X), ...
          kron(D([0,theta_3, theta_4, 0], I,X,Z,X), ...
           kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron(D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron(D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron(D([0, theta_11, theta_12, 0], I, X, Z, X),   ...
                     kron( D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                        kron( D([0, theta_15, theta_16, 0], I, X, Z, X), ... 
                            kron(D([0, theta_17, theta_18, 0], I, X, Z, X),   ...
                              kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, estimated_angles(1),estimated_angles(2), 0], I, X, Z, X), ...
                                        kron(D([0, estimated_angles(3),estimated_angles(4), 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));                                           
    
    %test 
    if norm (A-A0)  >= 0.001
         fprintf ('Matrix angles estgimation warning\n');
         return
    else

    end
    
    % Therefore, sample is 
    Sample_4 = [ theta_1, theta_2, ...
               theta_3, theta_4, ...
               theta_5, theta_6,...
               theta_7,theta_8,...
               theta_9, theta_10,...
               theta_11,theta_12,...
               theta_13, theta_14,...
               theta_15, theta_16,...
               theta_17, theta_18,...
               theta_19, theta_20,...
               theta_21, theta_22,...
               theta_23, theta_24,...
               theta_25, theta_26,...
               estimated_angles(1),estimated_angles(2), ...
               estimated_angles(3),estimated_angles(4), ...
               theta_31,theta_32];

    fprintf ('Sample R*X13Z14   =  %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f\n',...
              Sample_4); 
    writematrix ([Sample_4,j],'Data_16qubit.csv','WriteMode','append');

    % End of fifth case 
    %---------------------------------------------------------------------
    % Sixth case: X12Z13 
    % ---  I --- D(0, theta_1, theta_2, 0) --- 
    % ---  I --- D(0, theta_3, theta_4, 0) --- 
    % ---- I ----D(0, theta_5, theta_6, 0) ---
    % ---- I ----D(0, theta_7, theta_8, 0) ---
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_16, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- X ----D(0, theta_25, theta_26, 0) ---
    % ---- Z ----D(0, theta_27, theta_28, 0) ---
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---

        % Rotations  
    R = kron(D([0, theta_1, theta_2, 0], I, X, Z, X), ...
         kron(D([0, theta_3, theta_4, 0], I, X, Z, X), ...
           kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron(D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron(D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron(D([0, theta_11, theta_12, 0], I, X, Z, X), ...
                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
                           kron(D([0, theta_17, theta_18, 0], I, X, Z, X), ...
                             kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));
    % Stabilizer 
    X12Z13 = kron(I, ...
            kron(I, ...
                kron(I, ...
                    kron(I, ...
                        kron(I, ...
                            kron(I, ...
                               kron(I, ...
                                 kron(I, ...
                                    kron (I, ...
                                        kron(I, ...
                                            kron(I, ...
                                                kron(I, ...
                                                    kron (X, ...
                                                        kron(Z, ...
                                                            kron(I, ...
                                                                    I...
                    )))))))))))))));
    
    A = R*X12Z13;
    
    % We parametrise the matrix by using first two qbits 
    M0 = kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
           D([0, theta_27, theta_28, 0], I, X, Z, X)     );
    
    S0= kron(X,Z);
    B0 = M0*S0;
    
    % Recalculate angles 
    estimated_angles = DxD_Euler_angles (B0);
    

    % Equivalent Matrix 
    % --- I ----D(0, theta_1, theta_2, 0) --- 
    % --- I ----D(0, theta_3, theta_4, 0) --- 
    % --- I ----D(0, theta_5, theta_6, 0) --- 
    % --- I ----D(0, theta_7, theta_8, 0) --- 
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_16, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ----D(0, estimated_angles(1),estimated_angles(2), 0) ---
    % --- D(0, estimated_angles(3),estimated_angles(4), 0) --- 
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---
    
                                                   
    A0 = kron(D([0, theta_1, theta_2, 0], I,X,Z,X), ...
          kron(D([0,theta_3, theta_4, 0], I,X,Z,X), ...
           kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron(D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron(D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron(D([0, theta_11, theta_12, 0], I, X, Z, X),   ...
                     kron( D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                        kron( D([0, theta_15, theta_16, 0], I, X, Z, X), ... 
                            kron(D([0, theta_17, theta_18, 0], I, X, Z, X),   ...
                              kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                     kron(D([0, estimated_angles(1),estimated_angles(2), 0], I, X, Z, X), ...
                                        kron(D([0, estimated_angles(3),estimated_angles(4), 0], I, X, Z, X), ... 
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ...
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));                                           
    
    %test 
    if norm (A-A0)  >= 0.001
         fprintf ('Matrix angles estgimation warning\n');
         return
    else

    end
    
    % Therefore, sample is 
    Sample_5 = [ theta_1, theta_2, ...
               theta_3, theta_4, ...
               theta_5, theta_6,...
               theta_7,theta_8,...
               theta_9, theta_10,...
               theta_11,theta_12,...
               theta_13, theta_14,...
               theta_15, theta_16,...
               theta_17, theta_18,...
               theta_19, theta_20,...
               theta_21, theta_22,...
               theta_23, theta_24,...
               estimated_angles(1),estimated_angles(2), ...
               estimated_angles(3),estimated_angles(4), ...
               theta_29, theta_30,...
               theta_31,theta_32];

    fprintf ('Sample R*X12Z13   =  %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f\n',...
              Sample_5); 
    writematrix ([Sample_5,j],'Data_16qubit.csv','WriteMode','append');


    % End of sixth case 
    %---------------------------------------------------------------------
    % Seventh case: X6Z7 
    % ---  I --- D(0, theta_1, theta_2, 0) --- 
    % ---  I --- D(0, theta_3, theta_4, 0) --- 
    % ---- I ----D(0, theta_5, theta_6, 0) ---
    % ---- I ----D(0, theta_7, theta_8, 0) ---
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- X ----D(0, theta_13, theta_14, 0) ---
    % ---- Z ----D(0, theta_15, theta_16, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) ---
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---

        % Rotations  
    R = kron(D([0, theta_1, theta_2, 0], I, X, Z, X), ...
         kron(D([0, theta_3, theta_4, 0], I, X, Z, X), ...
           kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron(D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron(D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron(D([0, theta_11, theta_12, 0], I, X, Z, X), ...
                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
                           kron(D([0, theta_17, theta_18, 0], I, X, Z, X), ...
                             kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));
    % Stabilizer 
    X6Z7 = kron(I, ...
            kron(I, ...
                kron(I, ...
                    kron(I, ...
                        kron(I, ...
                            kron(I, ...
                               kron(X, ...
                                 kron(Z, ...
                                    kron (I, ...
                                        kron(I, ...
                                            kron(I, ...
                                                kron(I, ...
                                                    kron (I, ...
                                                        kron(I, ...
                                                            kron(I, ...
                                                                    I...
                    )))))))))))))));
    
    A = R*X6Z7;
    
    % We parametrise the matrix by using first two qbits 
    M0 = kron(D([0, theta_13, theta_14, 0], I, X, Z, X), ...
           D([0, theta_15, theta_16, 0], I, X, Z, X)     );
    
    S0= kron(X,Z);
    B0 = M0*S0;
    
    % Recalculate angles 
    estimated_angles = DxD_Euler_angles (B0);
    

    % Equivalent Matrix 
    % --- I ----D(0, theta_1, theta_2, 0) --- 
    % --- I ----D(0, theta_3, theta_4, 0) --- 
    % --- I ----D(0, theta_5, theta_6, 0) --- 
    % --- I ----D(0, theta_7, theta_8, 0) --- 
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ----D(0, estimated_angles(1),estimated_angles(2), 0) ---
    % --- D(0, estimated_angles(3),estimated_angles(4), 0) --- 
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) --- 
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---
    
                                                   
    A0 = kron(D([0, theta_1, theta_2, 0], I,X,Z,X), ...
          kron(D([0,theta_3, theta_4, 0], I,X,Z,X), ...
           kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron(D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron(D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron(D([0, theta_11, theta_12, 0], I, X, Z, X),   ...
                     kron(D([0, estimated_angles(1),estimated_angles(2), 0], I, X, Z, X), ...
                      kron(D([0, estimated_angles(3),estimated_angles(4), 0], I, X, Z, X), ... 
                         kron(D([0, theta_17, theta_18, 0], I, X, Z, X),   ...
                           kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                             kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                               kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                  kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                    kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ...
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));                                           
    
    %test 
    if norm (A-A0)  >= 0.001
         fprintf ('Matrix angles estgimation warning\n');
         return
    else

    end
    
    % Therefore, sample is 
    Sample_6 = [ theta_1, theta_2, ...
               theta_3, theta_4, ...
               theta_5, theta_6,...
               theta_7,theta_8,...
               theta_9, theta_10,...
               theta_11,theta_12,...
               estimated_angles(1),estimated_angles(2), ...
               estimated_angles(3),estimated_angles(4), ...
               theta_17, theta_18,...
               theta_19, theta_20,...
               theta_21, theta_22,...
               theta_23, theta_24,...
               theta_25, theta_26,...
               theta_27, theta_28,...
               theta_29, theta_30,...
               theta_31,theta_32];

    fprintf ('Sample R*X6Z7   =  %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f\n',...
              Sample_6); 

    writematrix ([Sample_6,j],'Data_16qubit.csv','WriteMode','append');

    % End of Seventh case 
    %---------------------------------------------------------------------
    % Eigth case: X3Z5 
    % ---  I --- D(0, theta_1, theta_2, 0) --- 
    % ---  I --- D(0, theta_3, theta_4, 0) --- 
    % ---- I ----D(0, theta_5, theta_6, 0) ---
    % ---- X ----D(0, theta_7, theta_8, 0) ---
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- Z ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_16, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) ---
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---

        % Rotations  
    R = kron(D([0, theta_1, theta_2, 0], I, X, Z, X), ...
         kron(D([0, theta_3, theta_4, 0], I, X, Z, X), ...
           kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron(D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron(D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron(D([0, theta_11, theta_12, 0], I, X, Z, X), ...
                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
                           kron(D([0, theta_17, theta_18, 0], I, X, Z, X), ...
                             kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));
    % Stabilizer 
    X3Z5 = kron(I, ...
            kron(I, ...
                kron(I, ...
                    kron(X, ...
                        kron(I, ...
                            kron(Z, ...
                               kron(I, ...
                                 kron(I, ...
                                    kron (I, ...
                                        kron(I, ...
                                            kron(I, ...
                                                kron(I, ...
                                                    kron (I, ...
                                                        kron(I, ...
                                                            kron(I, ...
                                                                    I...
                    )))))))))))))));
    
    A = R*X3Z5;
    
    % Interchange q4 and q5 
    % ---  I --- D(0, theta_1, theta_2, 0) --- 
    % ---  I --- D(0, theta_3, theta_4, 0) --- 
    % ---- I ----D(0, theta_5, theta_6, 0) ---
    % ---- X ----D(0, theta_7, theta_8, 0) ---
    % ---- Z ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_16, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) ---
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---

    P = [ 1 0 0 0 
         0 0 1 0  
         0 1 0 0  
         0 0 0 1 ]; % Interchange two qbits

     P = kron(I, ...
            kron(I, ...
                kron(I, ...
                    kron(I, ...
                        kron(P, ...
                            kron(I, ...
                               kron(I, ...
                                 kron(I, ...
                                    kron (I, ...
                                        kron(I, ...
                                            kron(I, ...
                                                    kron (I, ...
                                                        kron(I, ...
                                                            kron(I, ...
                                                                    I...
                    ))))))))))))));

    % We parametrise the matrix by using first two qbits 
    M0 = kron(D([0, theta_7, theta_8, 0], I, X, Z, X), ...
           D([0, theta_11, theta_12, 0], I, X, Z, X)     );
    
    S0= kron(X,Z);
    B0 = M0*S0;
    
    % Recalculate angles 
    estimated_angles = DxD_Euler_angles (B0);
    

    % Equivalent Matrix 
    % --- I ----D(0, theta_1, theta_2, 0) --- 
    % --- I ----D(0, theta_3, theta_4, 0) --- 
    % --- I ----D(0, theta_5, theta_6, 0) --- 
    % --- I ----D(0, theta_7, theta_8, 0) --- 
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ----D(0, estimated_angles(1),estimated_angles(2), 0) ---
    % --- D(0, estimated_angles(3),estimated_angles(4), 0) --- 
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) --- 
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---
    
                                                   
    A0 = kron(D([0, theta_1, theta_2, 0], I,X,Z,X), ...
          kron(D([0,theta_3, theta_4, 0], I,X,Z,X), ...
           kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
              kron(D([0, estimated_angles(1),estimated_angles(2), 0], I, X, Z, X), ...
                kron(D([0, estimated_angles(3),estimated_angles(4), 0], I, X, Z, X), ... 
                   kron(D([0, theta_9, theta_10, 0], I, X, Z, X),   ...
                     kron(D([0, theta_13, theta_14, 0], I, X, Z, X),   ...
                        kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
                         kron(D([0, theta_17, theta_18, 0], I, X, Z, X),   ...
                           kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                             kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                               kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                  kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                    kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ...
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));                                           
    
        % undo swap 
    A0=P*A0*P;
    %test 
    if norm (A-A0)  >= 0.001
         fprintf ('Matrix angles estgimation warning\n');
         return
    else

    end
    
    % Therefore, sample is 
    Sample_7 = [ theta_1, theta_2, ...
               theta_3, theta_4, ...
               theta_5, theta_6,...
               estimated_angles(1),estimated_angles(2), ...
               theta_9, theta_10,...
               estimated_angles(3),estimated_angles(4), ...
               theta_13, theta_14,...
               theta_15, theta_16,...
               theta_17, theta_18,...
               theta_19, theta_20,...
               theta_21, theta_22,...
               theta_23, theta_24,...
               theta_25, theta_26,...
               theta_27, theta_28,...
               theta_29, theta_30,...
               theta_31,theta_32];

    fprintf ('Sample R*X3Z5   =  %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f\n',...
              Sample_7); 

    writematrix ([Sample_7,j],'Data_16qubit.csv','WriteMode','append');

    % End of eigth case 
    %---------------------------------------------------------------------
    % Ninth case: X1Z4 
    % ---  I --- D(0, theta_1, theta_2, 0) --- 
    % ---  X --- D(0, theta_3, theta_4, 0) --- 
    % ---- I ----D(0, theta_5, theta_6, 0) ---
    % ---- I ----D(0, theta_7, theta_8, 0) ---
    % ---- Z ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_16, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) ---
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---

        % Rotations  
    R = kron(D([0, theta_1, theta_2, 0], I, X, Z, X), ...
         kron(D([0, theta_3, theta_4, 0], I, X, Z, X), ...
           kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron(D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron(D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron(D([0, theta_11, theta_12, 0], I, X, Z, X), ...
                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
                           kron(D([0, theta_17, theta_18, 0], I, X, Z, X), ...
                             kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));
    % Stabilizer 
    X1Z4 = kron(I, ...
            kron(X, ...
                kron(I, ...
                    kron(I, ...
                        kron(Z, ...
                            kron(I, ...
                               kron(I, ...
                                 kron(I, ...
                                    kron (I, ...
                                        kron(I, ...
                                            kron(I, ...
                                                kron(I, ...
                                                    kron (I, ...
                                                        kron(I, ...
                                                            kron(I, ...
                                                                    I...
                    )))))))))))))));
    
    A = R*X1Z4;
   
%     P = [ 1 0 0 0 
%          0 0 1 0  
%          0 1 0 0  
%          0 0 0 1 ]; % Interchange two qbits
% 
%      P = kron(I, ...
%             kron(I, ...
%                 kron(I, ...
%                     kron(I, ...
%                         kron(P, ...
%                             kron(I, ...
%                                kron(I, ...
%                                  kron(I, ...
%                                     kron (I, ...
%                                         kron(I, ...
%                                             kron(I, ...
%                                                     kron (I, ...
%                                                         kron(I, ...
%                                                             kron(I, ...
%                                                                     I...
%                     ))))))))))))));

    % We parametrise the matrix by using first two qbits 
    M0 = kron(D([0, theta_3, theta_4, 0], I, X, Z, X), ...
           D([0, theta_9, theta_10, 0], I, X, Z, X)     );
    
    S0= kron(X,Z);
    B0 = M0*S0;
    
    % Recalculate angles 
    estimated_angles = DxD_Euler_angles (B0);
    

    % Equivalent Matrix 
    % --- I ----D(0, theta_1, theta_2, 0) --- 
    % ----D(0, estimated_angles(1),estimated_angles(2), 0) ---
    % --- I ----D(0, theta_5, theta_6, 0) --- 
    % --- I ----D(0, theta_7, theta_8, 0) --- 
    % --- D(0, estimated_angles(3),estimated_angles(4), 0) --- 
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_26, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) --- 
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---
    
%                                                    
%     A0 = kron(D([0, theta_1, theta_2, 0], I,X,Z,X), ...
%           kron(D([0,theta_3, theta_4, 0], I,X,Z,X), ...
%            kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
%               kron(D([0, estimated_angles(1),estimated_angles(2), 0], I, X, Z, X), ...
%                 kron(D([0, estimated_angles(3),estimated_angles(4), 0], I, X, Z, X), ... 
%                    kron(D([0, theta_9, theta_10, 0], I, X, Z, X),   ...
%                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X),   ...
%                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
%                          kron(D([0, theta_17, theta_18, 0], I, X, Z, X),   ...
%                            kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
%                              kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
%                                kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
%                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
%                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
%                                         kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ...
%                                                 D([0, theta_31, theta_32, 0], I, X, Z, X)...
%                                                              )))))))))))))));                                           
%     
%         % undo swap 
%     A0=P*A0*P;
%     %test 
%     if norm (A-A0)  >= 0.001
%          fprintf ('Matrix angles estgimation warning\n');
%          return
%     else
% 
%     end
    
    % Therefore, sample is 
    Sample_8 = [ theta_1, theta_2, ...
               estimated_angles(1),estimated_angles(2), ...
               theta_5, theta_6,...
               theta_7, theta_8,...
               estimated_angles(3),estimated_angles(4), ...
               theta_11, theta_12,...
               theta_13, theta_14,...
               theta_15, theta_16,...
               theta_17, theta_18,...
               theta_19, theta_20,...
               theta_21, theta_22,...
               theta_23, theta_24,...
               theta_25, theta_26,...
               theta_27, theta_28,...
               theta_29, theta_30,...
               theta_31,theta_32];

    fprintf ('Sample R*X1Z4   =  %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f\n',...
              Sample_8); 

    writematrix ([Sample_8,j],'Data_16qubit.csv','WriteMode','append');

    % End of ninth case
%---------------------------------------------------------------------
    % Tenth case: X4Z7 
    % ---  I --- D(0, theta_1, theta_2, 0) --- 
    % ---  I --- D(0, theta_3, theta_4, 0) --- 
    % ---- I ----D(0, theta_5, theta_6, 0) ---
    % ---- I ----D(0, theta_7, theta_8, 0) ---
    % ---- X ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- Z ----D(0, theta_15, theta_16, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) ---
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---

        % Rotations  
    R = kron(D([0, theta_1, theta_2, 0], I, X, Z, X), ...
         kron(D([0, theta_3, theta_4, 0], I, X, Z, X), ...
           kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron(D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron(D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron(D([0, theta_11, theta_12, 0], I, X, Z, X), ...
                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
                           kron(D([0, theta_17, theta_18, 0], I, X, Z, X), ...
                             kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));
    % Stabilizer 
    X4Z7 = kron(I, ...
            kron(I, ...
                kron(I, ...
                    kron(I, ...
                        kron(X, ...
                            kron(I, ...
                               kron(I, ...
                                 kron(Z, ...
                                    kron (I, ...
                                        kron(I, ...
                                            kron(I, ...
                                                kron(I, ...
                                                    kron (I, ...
                                                        kron(I, ...
                                                            kron(I, ...
                                                                    I...
                    )))))))))))))));
    
    A = R*X4Z7;
   
%     P = [ 1 0 0 0 
%          0 0 1 0  
%          0 1 0 0  
%          0 0 0 1 ]; % Interchange two qbits
% 
%      P = kron(I, ...
%             kron(I, ...
%                 kron(I, ...
%                     kron(I, ...
%                         kron(P, ...
%                             kron(I, ...
%                                kron(I, ...
%                                  kron(I, ...
%                                     kron (I, ...
%                                         kron(I, ...
%                                             kron(I, ...
%                                                     kron (I, ...
%                                                         kron(I, ...
%                                                             kron(I, ...
%                                                                     I...
%                     ))))))))))))));

    % We parametrise the matrix by using first two qbits 
    M0 = kron(D([0, theta_9, theta_10, 0], I, X, Z, X), ...
           D([0, theta_15, theta_16, 0], I, X, Z, X)     );
    
    S0= kron(X,Z);
    B0 = M0*S0;
    
    % Recalculate angles 
    estimated_angles = DxD_Euler_angles (B0);
    

    % Equivalent Matrix 
    % --- I ----D(0, theta_1, theta_2, 0) --- 
    % ----D(0, estimated_angles(1),estimated_angles(2), 0) ---
    % --- I ----D(0, theta_5, theta_6, 0) --- 
    % --- I ----D(0, theta_7, theta_8, 0) --- 
    % --- D(0, estimated_angles(3),estimated_angles(4), 0) --- 
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_26, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) --- 
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---
    
%                                                    
%     A0 = kron(D([0, theta_1, theta_2, 0], I,X,Z,X), ...
%           kron(D([0,theta_3, theta_4, 0], I,X,Z,X), ...
%            kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
%               kron(D([0, estimated_angles(1),estimated_angles(2), 0], I, X, Z, X), ...
%                 kron(D([0, estimated_angles(3),estimated_angles(4), 0], I, X, Z, X), ... 
%                    kron(D([0, theta_9, theta_10, 0], I, X, Z, X),   ...
%                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X),   ...
%                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
%                          kron(D([0, theta_17, theta_18, 0], I, X, Z, X),   ...
%                            kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
%                              kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
%                                kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
%                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
%                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
%                                         kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ...
%                                                 D([0, theta_31, theta_32, 0], I, X, Z, X)...
%                                                              )))))))))))))));                                           
%     
%         % undo swap 
%     A0=P*A0*P;
%     %test 
%     if norm (A-A0)  >= 0.001
%          fprintf ('Matrix angles estgimation warning\n');
%          return
%     else
% 
%     end
    
    % Therefore, sample is 
    Sample_9 = [ theta_1, theta_2, ...
               theta_3, theta_4, ...
               theta_5, theta_6,...
               theta_7, theta_8,...
               estimated_angles(1),estimated_angles(2), ...
               theta_11, theta_12,...
               theta_13, theta_14,...
               estimated_angles(3),estimated_angles(4), ...
               theta_17, theta_18,...
               theta_19, theta_20,...
               theta_21, theta_22,...
               theta_23, theta_24,...
               theta_25, theta_26,...
               theta_27, theta_28,...
               theta_29, theta_30,...
               theta_31,theta_32];

    fprintf ('Sample R*X4Z7   =  %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f\n',...
              Sample_9); 

    writematrix ([Sample_9,j],'Data_16qubit.csv','WriteMode','append');

   % End of tenth case
%---------------------------------------------------------------------
    % Eleventh case: X7Z10
    % ---  I --- D(0, theta_1, theta_2, 0) --- 
    % ---  I --- D(0, theta_3, theta_4, 0) --- 
    % ---- I ----D(0, theta_5, theta_6, 0) ---
    % ---- I ----D(0, theta_7, theta_8, 0) ---
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- X ----D(0, theta_15, theta_16, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- Z ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) ---
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---

        % Rotations  
    R = kron(D([0, theta_1, theta_2, 0], I, X, Z, X), ...
         kron(D([0, theta_3, theta_4, 0], I, X, Z, X), ...
           kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron(D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron(D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron(D([0, theta_11, theta_12, 0], I, X, Z, X), ...
                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
                           kron(D([0, theta_17, theta_18, 0], I, X, Z, X), ...
                             kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));
    % Stabilizer 
    X7Z10 = kron(I, ...
            kron(I, ...
                kron(I, ...
                    kron(I, ...
                        kron(I, ...
                            kron(I, ...
                               kron(I, ...
                                 kron(X, ...
                                    kron (I, ...
                                        kron(I, ...
                                            kron(Z, ...
                                                kron(I, ...
                                                    kron (I, ...
                                                        kron(I, ...
                                                            kron(I, ...
                                                                    I...
                    )))))))))))))));
    
    A = R*X7Z10;
   
%     P = [ 1 0 0 0 
%          0 0 1 0  
%          0 1 0 0  
%          0 0 0 1 ]; % Interchange two qbits
% 
%      P = kron(I, ...
%             kron(I, ...
%                 kron(I, ...
%                     kron(I, ...
%                         kron(P, ...
%                             kron(I, ...
%                                kron(I, ...
%                                  kron(I, ...
%                                     kron (I, ...
%                                         kron(I, ...
%                                             kron(I, ...
%                                                     kron (I, ...
%                                                         kron(I, ...
%                                                             kron(I, ...
%                                                                     I...
%                     ))))))))))))));

    % We parametrise the matrix by using first two qbits 
    M0 = kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
           D([0, theta_21, theta_22, 0], I, X, Z, X)     );
    
    S0= kron(X,Z);
    B0 = M0*S0;
    
    % Recalculate angles 
    estimated_angles = DxD_Euler_angles (B0);
    

    % Equivalent Matrix 
    % --- I ----D(0, theta_1, theta_2, 0) --- 
    % ----D(0, estimated_angles(1),estimated_angles(2), 0) ---
    % --- I ----D(0, theta_5, theta_6, 0) --- 
    % --- I ----D(0, theta_7, theta_8, 0) --- 
    % --- D(0, estimated_angles(3),estimated_angles(4), 0) --- 
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_26, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) --- 
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---
    
%                                                    
%     A0 = kron(D([0, theta_1, theta_2, 0], I,X,Z,X), ...
%           kron(D([0,theta_3, theta_4, 0], I,X,Z,X), ...
%            kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
%               kron(D([0, estimated_angles(1),estimated_angles(2), 0], I, X, Z, X), ...
%                 kron(D([0, estimated_angles(3),estimated_angles(4), 0], I, X, Z, X), ... 
%                    kron(D([0, theta_9, theta_10, 0], I, X, Z, X),   ...
%                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X),   ...
%                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
%                          kron(D([0, theta_17, theta_18, 0], I, X, Z, X),   ...
%                            kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
%                              kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
%                                kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
%                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
%                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
%                                         kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ...
%                                                 D([0, theta_31, theta_32, 0], I, X, Z, X)...
%                                                              )))))))))))))));                                           
%     
%         % undo swap 
%     A0=P*A0*P;
%     %test 
%     if norm (A-A0)  >= 0.001
%          fprintf ('Matrix angles estgimation warning\n');
%          return
%     else
% 
%     end
    
    % Therefore, sample is 
    Sample_10 = [ theta_1, theta_2, ...
               theta_3, theta_4, ...
               theta_5, theta_6,...
               theta_7, theta_8,...
               theta_9, theta_10,...
               theta_11, theta_12,...
               theta_13, theta_14,...
               estimated_angles(1),estimated_angles(2), ...
               theta_17, theta_18,...
               theta_19, theta_20,...
               estimated_angles(3),estimated_angles(4), ...
               theta_23, theta_24,...
               theta_25, theta_26,...
               theta_27, theta_28,...
               theta_29, theta_30,...
               theta_31,theta_32];

    fprintf ('Sample R*X7Z10   =  %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f\n',...
              Sample_10); 

    writematrix ([Sample_10,j],'Data_16qubit.csv','WriteMode','append');
    % End of eleventh case
%---------------------------------------------------------------------

   % Twelfth case: X10Z12
    % ---  I --- D(0, theta_1, theta_2, 0) --- 
    % ---  I --- D(0, theta_3, theta_4, 0) --- 
    % ---- I ----D(0, theta_5, theta_6, 0) ---
    % ---- I ----D(0, theta_7, theta_8, 0) ---
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_16, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- X ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- Z ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) ---
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---

        % Rotations  
    R = kron(D([0, theta_1, theta_2, 0], I, X, Z, X), ...
         kron(D([0, theta_3, theta_4, 0], I, X, Z, X), ...
           kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron(D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron(D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron(D([0, theta_11, theta_12, 0], I, X, Z, X), ...
                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
                           kron(D([0, theta_17, theta_18, 0], I, X, Z, X), ...
                             kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));
    % Stabilizer 
    X10Z12 = kron(I, ...
            kron(I, ...
                kron(I, ...
                    kron(I, ...
                        kron(I, ...
                            kron(I, ...
                               kron(I, ...
                                 kron(I, ...
                                    kron (I, ...
                                        kron(I, ...
                                            kron(X, ...
                                                kron(I, ...
                                                    kron (Z, ...
                                                        kron(I, ...
                                                            kron(I, ...
                                                                    I...
                    )))))))))))))));
    
    A = R*X10Z12;
   
%     P = [ 1 0 0 0 
%          0 0 1 0  
%          0 1 0 0  
%          0 0 0 1 ]; % Interchange two qbits
% 
%      P = kron(I, ...
%             kron(I, ...
%                 kron(I, ...
%                     kron(I, ...
%                         kron(P, ...
%                             kron(I, ...
%                                kron(I, ...
%                                  kron(I, ...
%                                     kron (I, ...
%                                         kron(I, ...
%                                             kron(I, ...
%                                                     kron (I, ...
%                                                         kron(I, ...
%                                                             kron(I, ...
%                                                                     I...
%                     ))))))))))))));

    % We parametrise the matrix by using first two qbits 
    M0 = kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
           D([0, theta_25, theta_26, 0], I, X, Z, X)     );
    
    S0= kron(X,Z);
    B0 = M0*S0;
    
    % Recalculate angles 
    estimated_angles = DxD_Euler_angles (B0);
    

    % Equivalent Matrix 
    % --- I ----D(0, theta_1, theta_2, 0) --- 
    % ----D(0, estimated_angles(1),estimated_angles(2), 0) ---
    % --- I ----D(0, theta_5, theta_6, 0) --- 
    % --- I ----D(0, theta_7, theta_8, 0) --- 
    % --- D(0, estimated_angles(3),estimated_angles(4), 0) --- 
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_26, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) --- 
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---
    
%                                                    
%     A0 = kron(D([0, theta_1, theta_2, 0], I,X,Z,X), ...
%           kron(D([0,theta_3, theta_4, 0], I,X,Z,X), ...
%            kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
%               kron(D([0, estimated_angles(1),estimated_angles(2), 0], I, X, Z, X), ...
%                 kron(D([0, estimated_angles(3),estimated_angles(4), 0], I, X, Z, X), ... 
%                    kron(D([0, theta_9, theta_10, 0], I, X, Z, X),   ...
%                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X),   ...
%                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
%                          kron(D([0, theta_17, theta_18, 0], I, X, Z, X),   ...
%                            kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
%                              kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
%                                kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
%                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
%                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
%                                         kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ...
%                                                 D([0, theta_31, theta_32, 0], I, X, Z, X)...
%                                                              )))))))))))))));                                           
%     
%         % undo swap 
%     A0=P*A0*P;
%     %test 
%     if norm (A-A0)  >= 0.001
%          fprintf ('Matrix angles estgimation warning\n');
%          return
%     else
% 
%     end
    
    % Therefore, sample is 
    Sample_11 = [ theta_1, theta_2, ...
               theta_3, theta_4, ...
               theta_5, theta_6,...
               theta_7, theta_8,...
               theta_9, theta_10,...
               theta_11, theta_12,...
               theta_13, theta_14,...
               theta_15, theta_16,...
               theta_17, theta_18,...
               theta_19, theta_20,...
               estimated_angles(1),estimated_angles(2), ...
               theta_23, theta_24,...
               estimated_angles(3),estimated_angles(4), ...
               theta_27, theta_28,...
               theta_29, theta_30,...
               theta_31,theta_32];

    fprintf ('Sample R*X10Z12   =  %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f\n',...
              Sample_11); 

    writematrix ([Sample_11,j],'Data_16qubit.csv','WriteMode','append')

    % End of twelfth case
%---------------------------------------------------------------------
   % Thirteenth case: X12Z15
    % ---  I --- D(0, theta_1, theta_2, 0) --- 
    % ---  I --- D(0, theta_3, theta_4, 0) --- 
    % ---- I ----D(0, theta_5, theta_6, 0) ---
    % ---- I ----D(0, theta_7, theta_8, 0) ---
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_16, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- X ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) ---
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- Z ----D(0, theta_31, theta_32, 0) ---

        % Rotations  
    R = kron(D([0, theta_1, theta_2, 0], I, X, Z, X), ...
         kron(D([0, theta_3, theta_4, 0], I, X, Z, X), ...
           kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron(D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron(D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron(D([0, theta_11, theta_12, 0], I, X, Z, X), ...
                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
                           kron(D([0, theta_17, theta_18, 0], I, X, Z, X), ...
                             kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));
    % Stabilizer 
    X12Z15 = kron(I, ...
            kron(I, ...
                kron(I, ...
                    kron(I, ...
                        kron(I, ...
                            kron(I, ...
                               kron(I, ...
                                 kron(I, ...
                                    kron (I, ...
                                        kron(I, ...
                                            kron(I, ...
                                                kron(I, ...
                                                    kron (X, ...
                                                        kron(I, ...
                                                            kron(I, ...
                                                                    Z...
                    )))))))))))))));
    
    A = R*X12Z15;
   
%     P = [ 1 0 0 0 
%          0 0 1 0  
%          0 1 0 0  
%          0 0 0 1 ]; % Interchange two qbits
% 
%      P = kron(I, ...
%             kron(I, ...
%                 kron(I, ...
%                     kron(I, ...
%                         kron(P, ...
%                             kron(I, ...
%                                kron(I, ...
%                                  kron(I, ...
%                                     kron (I, ...
%                                         kron(I, ...
%                                             kron(I, ...
%                                                     kron (I, ...
%                                                         kron(I, ...
%                                                             kron(I, ...
%                                                                     I...
%                     ))))))))))))));

    % We parametrise the matrix by using first two qbits 
    M0 = kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
           D([0, theta_31, theta_32, 0], I, X, Z, X)     );
    
    S0= kron(X,Z);
    B0 = M0*S0;
    
    % Recalculate angles 
    estimated_angles = DxD_Euler_angles (B0);
    

    % Equivalent Matrix 
    % --- I ----D(0, theta_1, theta_2, 0) --- 
    % ----D(0, estimated_angles(1),estimated_angles(2), 0) ---
    % --- I ----D(0, theta_5, theta_6, 0) --- 
    % --- I ----D(0, theta_7, theta_8, 0) --- 
    % --- D(0, estimated_angles(3),estimated_angles(4), 0) --- 
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_26, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) --- 
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---
    
%                                                    
%     A0 = kron(D([0, theta_1, theta_2, 0], I,X,Z,X), ...
%           kron(D([0,theta_3, theta_4, 0], I,X,Z,X), ...
%            kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
%               kron(D([0, estimated_angles(1),estimated_angles(2), 0], I, X, Z, X), ...
%                 kron(D([0, estimated_angles(3),estimated_angles(4), 0], I, X, Z, X), ... 
%                    kron(D([0, theta_9, theta_10, 0], I, X, Z, X),   ...
%                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X),   ...
%                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
%                          kron(D([0, theta_17, theta_18, 0], I, X, Z, X),   ...
%                            kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
%                              kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
%                                kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
%                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
%                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
%                                         kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ...
%                                                 D([0, theta_31, theta_32, 0], I, X, Z, X)...
%                                                              )))))))))))))));                                           
%     
%         % undo swap 
%     A0=P*A0*P;
%     %test 
%     if norm (A-A0)  >= 0.001
%          fprintf ('Matrix angles estgimation warning\n');
%          return
%     else
% 
%     end
    
    % Therefore, sample is 
    Sample_12 = [ theta_1, theta_2, ...
               theta_3, theta_4, ...
               theta_5, theta_6,...
               theta_7, theta_8,...
               theta_9, theta_10,...
               theta_11, theta_12,...
               theta_13, theta_14,...
               theta_15, theta_16,...
               theta_17, theta_18,...
               theta_19, theta_20,...
               theta_21, theta_22,...
               theta_23, theta_24,...
               estimated_angles(1),estimated_angles(2), ...
               theta_27, theta_28,...
               theta_29, theta_30,...
               estimated_angles(3),estimated_angles(4)];

    fprintf ('Sample R*X12Z15   =  %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f\n',...
              Sample_12); 

    writematrix ([Sample_12,j],'Data_16qubit.csv','WriteMode','append')

   % End of thirteenth case
%---------------------------------------------------------------------
  % Fourteenth case: X5Z8
    % ---  I --- D(0, theta_1, theta_2, 0) --- 
    % ---  I --- D(0, theta_3, theta_4, 0) --- 
    % ---- I ----D(0, theta_5, theta_6, 0) ---
    % ---- I ----D(0, theta_7, theta_8, 0) ---
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- X ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_16, 0) ---
    % ---- Z ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) ---
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---

        % Rotations  
    R = kron(D([0, theta_1, theta_2, 0], I, X, Z, X), ...
         kron(D([0, theta_3, theta_4, 0], I, X, Z, X), ...
           kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron(D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron(D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron(D([0, theta_11, theta_12, 0], I, X, Z, X), ...
                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
                           kron(D([0, theta_17, theta_18, 0], I, X, Z, X), ...
                             kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));
    % Stabilizer 
    X5Z8 = kron(I, ...
            kron(I, ...
                kron(I, ...
                    kron(I, ...
                        kron(I, ...
                            kron(X, ...
                               kron(I, ...
                                 kron(I, ...
                                    kron (Z, ...
                                        kron(I, ...
                                            kron(I, ...
                                                kron(I, ...
                                                    kron (I, ...
                                                        kron(I, ...
                                                            kron(I, ...
                                                                    I...
                    )))))))))))))));
    
    A = R*X5Z8;
   
%     P = [ 1 0 0 0 
%          0 0 1 0  
%          0 1 0 0  
%          0 0 0 1 ]; % Interchange two qbits
% 
%      P = kron(I, ...
%             kron(I, ...
%                 kron(I, ...
%                     kron(I, ...
%                         kron(P, ...
%                             kron(I, ...
%                                kron(I, ...
%                                  kron(I, ...
%                                     kron (I, ...
%                                         kron(I, ...
%                                             kron(I, ...
%                                                     kron (I, ...
%                                                         kron(I, ...
%                                                             kron(I, ...
%                                                                     I...
%                     ))))))))))))));

    % We parametrise the matrix by using first two qbits 
    M0 = kron(D([0, theta_11, theta_12, 0], I, X, Z, X), ...
           D([0, theta_17, theta_18, 0], I, X, Z, X)     );
    
    S0= kron(X,Z);
    B0 = M0*S0;
    
    % Recalculate angles 
    estimated_angles = DxD_Euler_angles (B0);
    

    % Equivalent Matrix 
    % --- I ----D(0, theta_1, theta_2, 0) --- 
    % ----D(0, estimated_angles(1),estimated_angles(2), 0) ---
    % --- I ----D(0, theta_5, theta_6, 0) --- 
    % --- I ----D(0, theta_7, theta_8, 0) --- 
    % --- D(0, estimated_angles(3),estimated_angles(4), 0) --- 
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_26, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) --- 
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---
    
%                                                    
%     A0 = kron(D([0, theta_1, theta_2, 0], I,X,Z,X), ...
%           kron(D([0,theta_3, theta_4, 0], I,X,Z,X), ...
%            kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
%               kron(D([0, estimated_angles(1),estimated_angles(2), 0], I, X, Z, X), ...
%                 kron(D([0, estimated_angles(3),estimated_angles(4), 0], I, X, Z, X), ... 
%                    kron(D([0, theta_9, theta_10, 0], I, X, Z, X),   ...
%                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X),   ...
%                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
%                          kron(D([0, theta_17, theta_18, 0], I, X, Z, X),   ...
%                            kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
%                              kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
%                                kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
%                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
%                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
%                                         kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ...
%                                                 D([0, theta_31, theta_32, 0], I, X, Z, X)...
%                                                              )))))))))))))));                                           
%     
%         % undo swap 
%     A0=P*A0*P;
%     %test 
%     if norm (A-A0)  >= 0.001
%          fprintf ('Matrix angles estgimation warning\n');
%          return
%     else
% 
%     end
    
    % Therefore, sample is 
    Sample_13 = [ theta_1, theta_2, ...
               theta_3, theta_4, ...
               theta_5, theta_6,...
               theta_7, theta_8,...
               theta_9, theta_10,...
               estimated_angles(1),estimated_angles(2), ...
               theta_13, theta_14,...
               theta_15, theta_16,...
               estimated_angles(3),estimated_angles(4), ...
               theta_19, theta_20,...
               theta_21, theta_22,...
               theta_23, theta_24,...
               theta_25, theta_26,...
               theta_27, theta_28,...
               theta_29, theta_30,...
               theta_31, theta_32];

    fprintf ('Sample R*X5Z8   =  %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f\n',...
              Sample_13); 

    writematrix ([Sample_13,j],'Data_16qubit.csv','WriteMode','append')

   % End of fourteenth case
%---------------------------------------------------------------------
  % Fifteenth case: X8Z11
    % ---  I --- D(0, theta_1, theta_2, 0) --- 
    % ---  I --- D(0, theta_3, theta_4, 0) --- 
    % ---- I ----D(0, theta_5, theta_6, 0) ---
    % ---- I ----D(0, theta_7, theta_8, 0) ---
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_16, 0) ---
    % ---- X ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- Z ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) ---
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---

        % Rotations  
    R = kron(D([0, theta_1, theta_2, 0], I, X, Z, X), ...
         kron(D([0, theta_3, theta_4, 0], I, X, Z, X), ...
           kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron(D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron(D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron(D([0, theta_11, theta_12, 0], I, X, Z, X), ...
                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
                           kron(D([0, theta_17, theta_18, 0], I, X, Z, X), ...
                             kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));
    % Stabilizer 
    X8Z11 = kron(I, ...
            kron(I, ...
                kron(I, ...
                    kron(I, ...
                        kron(I, ...
                            kron(I, ...
                               kron(I, ...
                                 kron(I, ...
                                    kron (X, ...
                                        kron(I, ...
                                            kron(I, ...
                                                kron(Z, ...
                                                    kron (I, ...
                                                        kron(I, ...
                                                            kron(I, ...
                                                                    I...
                    )))))))))))))));
    
    A = R*X8Z11;
   
%     P = [ 1 0 0 0 
%          0 0 1 0  
%          0 1 0 0  
%          0 0 0 1 ]; % Interchange two qbits
% 
%      P = kron(I, ...
%             kron(I, ...
%                 kron(I, ...
%                     kron(I, ...
%                         kron(P, ...
%                             kron(I, ...
%                                kron(I, ...
%                                  kron(I, ...
%                                     kron (I, ...
%                                         kron(I, ...
%                                             kron(I, ...
%                                                     kron (I, ...
%                                                         kron(I, ...
%                                                             kron(I, ...
%                                                                     I...
%                     ))))))))))))));

    % We parametrise the matrix by using first two qbits 
    M0 = kron(D([0, theta_17, theta_18, 0], I, X, Z, X), ...
           D([0, theta_23, theta_24, 0], I, X, Z, X)     );
    
    S0= kron(X,Z);
    B0 = M0*S0;
    
    % Recalculate angles 
    estimated_angles = DxD_Euler_angles (B0);
    

    % Equivalent Matrix 
    % --- I ----D(0, theta_1, theta_2, 0) --- 
    % ----D(0, estimated_angles(1),estimated_angles(2), 0) ---
    % --- I ----D(0, theta_5, theta_6, 0) --- 
    % --- I ----D(0, theta_7, theta_8, 0) --- 
    % --- D(0, estimated_angles(3),estimated_angles(4), 0) --- 
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_26, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) --- 
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---
    
%                                                    
%     A0 = kron(D([0, theta_1, theta_2, 0], I,X,Z,X), ...
%           kron(D([0,theta_3, theta_4, 0], I,X,Z,X), ...
%            kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
%               kron(D([0, estimated_angles(1),estimated_angles(2), 0], I, X, Z, X), ...
%                 kron(D([0, estimated_angles(3),estimated_angles(4), 0], I, X, Z, X), ... 
%                    kron(D([0, theta_9, theta_10, 0], I, X, Z, X),   ...
%                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X),   ...
%                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
%                          kron(D([0, theta_17, theta_18, 0], I, X, Z, X),   ...
%                            kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
%                              kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
%                                kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
%                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
%                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
%                                         kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ...
%                                                 D([0, theta_31, theta_32, 0], I, X, Z, X)...
%                                                              )))))))))))))));                                           
%     
%         % undo swap 
%     A0=P*A0*P;
%     %test 
%     if norm (A-A0)  >= 0.001
%          fprintf ('Matrix angles estgimation warning\n');
%          return
%     else
% 
%     end
    
    % Therefore, sample is 
    Sample_14 = [ theta_1, theta_2, ...
               theta_3, theta_4, ...
               theta_5, theta_6,...
               theta_7, theta_8,...
               theta_9, theta_10,...
               theta_11, theta_12,...
               theta_13, theta_14,...
               theta_15, theta_16,...
               estimated_angles(1),estimated_angles(2), ...
               theta_19, theta_20,...
               theta_21, theta_22,...
               estimated_angles(3),estimated_angles(4), ...
               theta_25, theta_26,...
               theta_27, theta_28,...
               theta_29, theta_30,...
               theta_31, theta_32];

    fprintf ('Sample R*X8Z11   =  %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f\n',...
              Sample_14); 

    writematrix ([Sample_14,j],'Data_16qubit.csv','WriteMode','append')

   % End of fifteenth case

%---------------------------------------------------------------------
  % Sixteenth case: X11Z14
    % ---  I --- D(0, theta_1, theta_2, 0) --- 
    % ---  I --- D(0, theta_3, theta_4, 0) --- 
    % ---- I ----D(0, theta_5, theta_6, 0) ---
    % ---- I ----D(0, theta_7, theta_8, 0) ---
    % ---- I ----D(0, theta_9, theta_10, 0) ---
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_16, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- X ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) ---
    % ---- Z ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---

        % Rotations  
    R = kron(D([0, theta_1, theta_2, 0], I, X, Z, X), ...
         kron(D([0, theta_3, theta_4, 0], I, X, Z, X), ...
           kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
             kron(D([0, theta_7, theta_8, 0], I, X, Z, X), ...
                kron(D([0, theta_9, theta_10, 0], I, X, Z, X), ... 
                   kron(D([0, theta_11, theta_12, 0], I, X, Z, X), ...
                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X), ...
                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
                           kron(D([0, theta_17, theta_18, 0], I, X, Z, X), ...
                             kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
                               kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
                                 kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
                                        kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ... 
                                                D([0, theta_31, theta_32, 0], I, X, Z, X)...
                                                             )))))))))))))));
    % Stabilizer 
    X11Z14 = kron(I, ...
            kron(I, ...
                kron(I, ...
                    kron(I, ...
                        kron(I, ...
                            kron(I, ...
                               kron(I, ...
                                 kron(I, ...
                                    kron (I, ...
                                        kron(I, ...
                                            kron(I, ...
                                                kron(X, ...
                                                    kron (I, ...
                                                        kron(I, ...
                                                            kron(Z, ...
                                                                    I...
                    )))))))))))))));
    
    A = R*X11Z14;
   
%     P = [ 1 0 0 0 
%          0 0 1 0  
%          0 1 0 0  
%          0 0 0 1 ]; % Interchange two qbits
% 
%      P = kron(I, ...
%             kron(I, ...
%                 kron(I, ...
%                     kron(I, ...
%                         kron(P, ...
%                             kron(I, ...
%                                kron(I, ...
%                                  kron(I, ...
%                                     kron (I, ...
%                                         kron(I, ...
%                                             kron(I, ...
%                                                     kron (I, ...
%                                                         kron(I, ...
%                                                             kron(I, ...
%                                                                     I...
%                     ))))))))))))));

    % We parametrise the matrix by using first two qbits 
    M0 = kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
           D([0, theta_29, theta_30, 0], I, X, Z, X)     );
    
    S0= kron(X,Z);
    B0 = M0*S0;
    
    % Recalculate angles 
    estimated_angles = DxD_Euler_angles (B0);
    

    % Equivalent Matrix 
    % --- I ----D(0, theta_1, theta_2, 0) --- 
    % ----D(0, estimated_angles(1),estimated_angles(2), 0) ---
    % --- I ----D(0, theta_5, theta_6, 0) --- 
    % --- I ----D(0, theta_7, theta_8, 0) --- 
    % --- D(0, estimated_angles(3),estimated_angles(4), 0) --- 
    % ---- I ----D(0, theta_11, theta_12, 0) ---
    % ---- I ----D(0, theta_13, theta_14, 0) ---
    % ---- I ----D(0, theta_15, theta_26, 0) ---
    % ---- I ----D(0, theta_17, theta_18, 0) ---
    % ---- I ----D(0, theta_19, theta_20, 0) ---
    % ---- I ----D(0, theta_21, theta_22, 0) ---
    % ---- I ----D(0, theta_23, theta_24, 0) ---
    % ---- I ----D(0, theta_25, theta_26, 0) ---
    % ---- I ----D(0, theta_27, theta_28, 0) --- 
    % ---- I ----D(0, theta_29, theta_30, 0) ---
    % ---- I ----D(0, theta_31, theta_32, 0) ---
    
%                                                    
%     A0 = kron(D([0, theta_1, theta_2, 0], I,X,Z,X), ...
%           kron(D([0,theta_3, theta_4, 0], I,X,Z,X), ...
%            kron(D([0, theta_5, theta_6, 0], I, X, Z, X), ...
%               kron(D([0, estimated_angles(1),estimated_angles(2), 0], I, X, Z, X), ...
%                 kron(D([0, estimated_angles(3),estimated_angles(4), 0], I, X, Z, X), ... 
%                    kron(D([0, theta_9, theta_10, 0], I, X, Z, X),   ...
%                      kron(D([0, theta_13, theta_14, 0], I, X, Z, X),   ...
%                         kron(D([0, theta_15, theta_16, 0], I, X, Z, X), ...
%                          kron(D([0, theta_17, theta_18, 0], I, X, Z, X),   ...
%                            kron(D([0, theta_19, theta_20, 0], I, X, Z, X), ...
%                              kron(D([0, theta_21, theta_22, 0], I, X, Z, X), ...
%                                kron(D([0, theta_23, theta_24, 0], I, X, Z, X), ...
%                                   kron(D([0, theta_25, theta_26, 0], I, X, Z, X), ...
%                                     kron(D([0, theta_27, theta_28, 0], I, X, Z, X), ...
%                                         kron(D([0, theta_29, theta_30, 0], I, X, Z, X), ...
%                                                 D([0, theta_31, theta_32, 0], I, X, Z, X)...
%                                                              )))))))))))))));                                           
%     
%         % undo swap 
%     A0=P*A0*P;
%     %test 
%     if norm (A-A0)  >= 0.001
%          fprintf ('Matrix angles estgimation warning\n');
%          return
%     else
% 
%     end
    
    % Therefore, sample is 
    Sample_15 = [ theta_1, theta_2, ...
               theta_3, theta_4, ...
               theta_5, theta_6,...
               theta_7, theta_8,...
               theta_9, theta_10,...
               theta_11, theta_12,...
               theta_13, theta_14,...
               theta_15, theta_16,...
               estimated_angles(1),estimated_angles(2), ...
               theta_19, theta_20,...
               theta_21, theta_22,...
               estimated_angles(3),estimated_angles(4), ...
               theta_25, theta_26,...
               theta_27, theta_28,...
               theta_29, theta_30,...
               theta_31, theta_32];

    fprintf ('Sample R*X11Z14   =  %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f,%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f\n',...
              Sample_15); 

    writematrix ([Sample_15,j],'Data_16qubit.csv','WriteMode','append')

   % End of sixteenth case
%---------------------------------------------------------------------
% Generate Dataset
    for r = 1:samples

%c_minus*s_1
        writematrix ([[Sample_0(1),Sample_0(2),Sample_0(3),Sample_0(4),Sample_0(5),Sample_0(6),Sample_0(7),Sample_0(8),Sample_0(9),Sample_0(10),Sample_0(11),Sample_0(12),Sample_0(13),Sample_0(14),Sample_0(15),Sample_0(16),Sample_0(17),Sample_0(18),Sample_0(19),Sample_0(20),...
            Sample_0(21),Sample_0(22),Sample_0(23),Sample_0(24),Sample_0(25),Sample_0(26),Sample_0(27),Sample_0(28),Sample_0(29),Sample_0(30),Sample_0(31),Sample_0(32)] + ...
            [Sample_0(1)*random("Normal",0,sqrt(eps)),Sample_0(2)*random("Normal",0,sqrt(eps)),Sample_0(3)*random("Normal",0,sqrt(eps)), ...
            Sample_0(4)*random("Normal",0,sqrt(eps)),Sample_0(5)*random("Normal",0,sqrt(eps)),Sample_0(6)*random("Normal",0,sqrt(eps)), ...
            Sample_0(7)*random("Normal",0,sqrt(eps)),Sample_0(8)*random("Normal",0,sqrt(eps)),Sample_0(9)*random("Normal",0,sqrt(eps)),Sample_0(10)*random("Normal",0,sqrt(eps)), ...
            Sample_0(11)*random("Normal",0,sqrt(eps)),Sample_0(12)*random("Normal",0,sqrt(eps)),Sample_0(13)*random("Normal",0,sqrt(eps)),Sample_0(14)*random("Normal",0,sqrt(eps)),...
            Sample_0(15)*random("Normal",0,sqrt(eps)),Sample_0(16)*random("Normal",0,sqrt(eps)),Sample_0(17)*random("Normal",0,sqrt(eps)),Sample_0(18)*random("Normal",0,sqrt(eps)),...
            Sample_0(19)*random("Normal",0,sqrt(eps)),Sample_0(20)*random("Normal",0,sqrt(eps)),...
            Sample_0(21)*random("Normal",0,sqrt(eps)),Sample_0(22)*random("Normal",0,sqrt(eps)),Sample_0(23)*random("Normal",0,sqrt(eps)),Sample_0(24)*random("Normal",0,sqrt(eps)),...
            Sample_0(25)*random("Normal",0,sqrt(eps)),Sample_0(26)*random("Normal",0,sqrt(eps)),Sample_0(27)*random("Normal",0,sqrt(eps)),Sample_0(28)*random("Normal",0,sqrt(eps)),...
            Sample_0(29)*random("Normal",0,sqrt(eps)),Sample_0(30)*random("Normal",0,sqrt(eps)),Sample_0(31)*random("Normal",0,sqrt(eps)),Sample_0(32)*random("Normal",0,sqrt(eps))] ...
            ,j],'Data_16qubit.csv','WriteMode','append');

        writematrix ([[Sample_1(1),Sample_1(2),Sample_1(3),Sample_1(4),Sample_1(5),Sample_1(6),Sample_1(7),Sample_1(8),Sample_1(9),Sample_1(10),Sample_1(11),Sample_1(12),Sample_1(13),Sample_1(14),Sample_1(15),Sample_1(16),Sample_1(17),Sample_1(18),Sample_1(19),Sample_1(20),...
            Sample_1(21),Sample_1(22),Sample_1(23),Sample_1(24),Sample_1(25),Sample_1(26),Sample_1(27),Sample_1(28),Sample_1(29),Sample_1(30),Sample_1(31),Sample_1(32)] + ...
            [Sample_1(1)*random("Normal",0,sqrt(eps)),Sample_1(2)*random("Normal",0,sqrt(eps)),Sample_1(3)*random("Normal",0,sqrt(eps)), ...
            Sample_1(4)*random("Normal",0,sqrt(eps)),Sample_1(5)*random("Normal",0,sqrt(eps)),Sample_1(6)*random("Normal",0,sqrt(eps)), ...
            Sample_1(7)*random("Normal",0,sqrt(eps)),Sample_1(8)*random("Normal",0,sqrt(eps)),Sample_1(9)*random("Normal",0,sqrt(eps)),Sample_1(10)*random("Normal",0,sqrt(eps)), ...
            Sample_1(11)*random("Normal",0,sqrt(eps)),Sample_1(12)*random("Normal",0,sqrt(eps)),Sample_1(13)*random("Normal",0,sqrt(eps)),Sample_1(14)*random("Normal",0,sqrt(eps)),...
            Sample_1(15)*random("Normal",0,sqrt(eps)),Sample_1(16)*random("Normal",0,sqrt(eps)),Sample_1(17)*random("Normal",0,sqrt(eps)),Sample_1(18)*random("Normal",0,sqrt(eps)),...
            Sample_1(19)*random("Normal",0,sqrt(eps)),Sample_1(20)*random("Normal",0,sqrt(eps)),...
            Sample_1(21)*random("Normal",0,sqrt(eps)),Sample_1(22)*random("Normal",0,sqrt(eps)),Sample_1(23)*random("Normal",0,sqrt(eps)),Sample_1(24)*random("Normal",0,sqrt(eps)),...
            Sample_1(25)*random("Normal",0,sqrt(eps)),Sample_1(26)*random("Normal",0,sqrt(eps)),Sample_1(27)*random("Normal",0,sqrt(eps)),Sample_1(28)*random("Normal",0,sqrt(eps)),...
            Sample_1(29)*random("Normal",0,sqrt(eps)),Sample_1(30)*random("Normal",0,sqrt(eps)),Sample_1(31)*random("Normal",0,sqrt(eps)),Sample_1(32)*random("Normal",0,sqrt(eps))] ...
            ,j],'Data_16qubit.csv','WriteMode','append');

                writematrix ([[Sample_2(1),Sample_2(2),Sample_2(3),Sample_2(4),Sample_2(5),Sample_2(6),Sample_2(7),Sample_2(8),Sample_2(9),Sample_2(10),Sample_2(11),Sample_2(12),Sample_2(13),Sample_2(14),Sample_2(15),Sample_2(16),Sample_2(17),Sample_2(18),Sample_2(19),Sample_2(20),...
            Sample_2(21),Sample_2(22),Sample_2(23),Sample_2(24),Sample_2(25),Sample_2(26),Sample_2(27),Sample_2(28),Sample_2(29),Sample_2(30),Sample_2(31),Sample_2(32)] + ...
            [Sample_2(1)*random("Normal",0,sqrt(eps)),Sample_2(2)*random("Normal",0,sqrt(eps)),Sample_2(3)*random("Normal",0,sqrt(eps)), ...
            Sample_2(4)*random("Normal",0,sqrt(eps)),Sample_2(5)*random("Normal",0,sqrt(eps)),Sample_2(6)*random("Normal",0,sqrt(eps)), ...
            Sample_2(7)*random("Normal",0,sqrt(eps)),Sample_2(8)*random("Normal",0,sqrt(eps)),Sample_2(9)*random("Normal",0,sqrt(eps)),Sample_2(10)*random("Normal",0,sqrt(eps)), ...
            Sample_2(11)*random("Normal",0,sqrt(eps)),Sample_2(12)*random("Normal",0,sqrt(eps)),Sample_2(13)*random("Normal",0,sqrt(eps)),Sample_2(14)*random("Normal",0,sqrt(eps)),...
            Sample_2(15)*random("Normal",0,sqrt(eps)),Sample_2(16)*random("Normal",0,sqrt(eps)),Sample_2(17)*random("Normal",0,sqrt(eps)),Sample_2(18)*random("Normal",0,sqrt(eps)),...
            Sample_2(19)*random("Normal",0,sqrt(eps)),Sample_2(20)*random("Normal",0,sqrt(eps)),...
            Sample_2(21)*random("Normal",0,sqrt(eps)),Sample_2(22)*random("Normal",0,sqrt(eps)),Sample_2(23)*random("Normal",0,sqrt(eps)),Sample_2(24)*random("Normal",0,sqrt(eps)),...
            Sample_2(25)*random("Normal",0,sqrt(eps)),Sample_2(26)*random("Normal",0,sqrt(eps)),Sample_2(27)*random("Normal",0,sqrt(eps)),Sample_2(28)*random("Normal",0,sqrt(eps)),...
            Sample_2(29)*random("Normal",0,sqrt(eps)),Sample_2(30)*random("Normal",0,sqrt(eps)),Sample_2(31)*random("Normal",0,sqrt(eps)),Sample_2(32)*random("Normal",0,sqrt(eps))] ...
            ,j],'Data_16qubit.csv','WriteMode','append');

                     writematrix ([[Sample_3(1),Sample_3(2),Sample_3(3),Sample_3(4),Sample_3(5),Sample_3(6),Sample_3(7),Sample_3(8),Sample_3(9),Sample_3(10),Sample_3(11),Sample_3(12),Sample_3(13),Sample_3(14),Sample_3(15),Sample_3(16),Sample_3(17),Sample_3(18),Sample_3(19),Sample_3(20),...
            Sample_3(21),Sample_3(22),Sample_3(23),Sample_3(24),Sample_3(25),Sample_3(26),Sample_3(27),Sample_3(28),Sample_3(29),Sample_3(30),Sample_3(31),Sample_3(32)] + ...
            [Sample_3(1)*random("Normal",0,sqrt(eps)),Sample_3(2)*random("Normal",0,sqrt(eps)),Sample_3(3)*random("Normal",0,sqrt(eps)), ...
            Sample_3(4)*random("Normal",0,sqrt(eps)),Sample_3(5)*random("Normal",0,sqrt(eps)),Sample_3(6)*random("Normal",0,sqrt(eps)), ...
            Sample_3(7)*random("Normal",0,sqrt(eps)),Sample_3(8)*random("Normal",0,sqrt(eps)),Sample_3(9)*random("Normal",0,sqrt(eps)),Sample_3(10)*random("Normal",0,sqrt(eps)), ...
            Sample_3(11)*random("Normal",0,sqrt(eps)),Sample_3(12)*random("Normal",0,sqrt(eps)),Sample_3(13)*random("Normal",0,sqrt(eps)),Sample_3(14)*random("Normal",0,sqrt(eps)),...
            Sample_3(15)*random("Normal",0,sqrt(eps)),Sample_3(16)*random("Normal",0,sqrt(eps)),Sample_3(17)*random("Normal",0,sqrt(eps)),Sample_3(18)*random("Normal",0,sqrt(eps)),...
            Sample_3(19)*random("Normal",0,sqrt(eps)),Sample_3(20)*random("Normal",0,sqrt(eps)),...
            Sample_3(21)*random("Normal",0,sqrt(eps)),Sample_3(22)*random("Normal",0,sqrt(eps)),Sample_3(23)*random("Normal",0,sqrt(eps)),Sample_3(24)*random("Normal",0,sqrt(eps)),...
            Sample_3(25)*random("Normal",0,sqrt(eps)),Sample_3(26)*random("Normal",0,sqrt(eps)),Sample_3(27)*random("Normal",0,sqrt(eps)),Sample_3(28)*random("Normal",0,sqrt(eps)),...
            Sample_3(29)*random("Normal",0,sqrt(eps)),Sample_3(30)*random("Normal",0,sqrt(eps)),Sample_3(31)*random("Normal",0,sqrt(eps)),Sample_3(32)*random("Normal",0,sqrt(eps))] ...
            ,j],'Data_16qubit.csv','WriteMode','append');

                    writematrix ([[Sample_4(1),Sample_4(2),Sample_4(3),Sample_4(4),Sample_4(5),Sample_4(6),Sample_4(7),Sample_4(8),Sample_4(9),Sample_4(10),Sample_4(11),Sample_4(12),Sample_4(13),Sample_4(14),Sample_4(15),Sample_4(16),Sample_4(17),Sample_4(18),Sample_4(19),Sample_4(20),...
            Sample_4(21),Sample_4(22),Sample_4(23),Sample_4(24),Sample_4(25),Sample_4(26),Sample_4(27),Sample_4(28),Sample_4(29),Sample_4(30),Sample_4(31),Sample_4(32)] + ...
            [Sample_4(1)*random("Normal",0,sqrt(eps)),Sample_4(2)*random("Normal",0,sqrt(eps)),Sample_4(3)*random("Normal",0,sqrt(eps)), ...
            Sample_4(4)*random("Normal",0,sqrt(eps)),Sample_4(5)*random("Normal",0,sqrt(eps)),Sample_4(6)*random("Normal",0,sqrt(eps)), ...
            Sample_4(7)*random("Normal",0,sqrt(eps)),Sample_4(8)*random("Normal",0,sqrt(eps)),Sample_4(9)*random("Normal",0,sqrt(eps)),Sample_4(10)*random("Normal",0,sqrt(eps)), ...
            Sample_4(11)*random("Normal",0,sqrt(eps)),Sample_4(12)*random("Normal",0,sqrt(eps)),Sample_4(13)*random("Normal",0,sqrt(eps)),Sample_4(14)*random("Normal",0,sqrt(eps)),...
            Sample_4(15)*random("Normal",0,sqrt(eps)),Sample_4(16)*random("Normal",0,sqrt(eps)),Sample_4(17)*random("Normal",0,sqrt(eps)),Sample_4(18)*random("Normal",0,sqrt(eps)),...
            Sample_4(19)*random("Normal",0,sqrt(eps)),Sample_4(20)*random("Normal",0,sqrt(eps)),...
            Sample_4(21)*random("Normal",0,sqrt(eps)),Sample_4(22)*random("Normal",0,sqrt(eps)),Sample_4(23)*random("Normal",0,sqrt(eps)),Sample_4(24)*random("Normal",0,sqrt(eps)),...
            Sample_4(25)*random("Normal",0,sqrt(eps)),Sample_4(26)*random("Normal",0,sqrt(eps)),Sample_4(27)*random("Normal",0,sqrt(eps)),Sample_4(28)*random("Normal",0,sqrt(eps)),...
            Sample_4(29)*random("Normal",0,sqrt(eps)),Sample_4(30)*random("Normal",0,sqrt(eps)),Sample_4(31)*random("Normal",0,sqrt(eps)),Sample_4(32)*random("Normal",0,sqrt(eps))] ...
            ,j],'Data_16qubit.csv','WriteMode','append');

                    writematrix ([[Sample_5(1),Sample_5(2),Sample_5(3),Sample_5(4),Sample_5(5),Sample_5(6),Sample_5(7),Sample_5(8),Sample_5(9),Sample_5(10),Sample_5(11),Sample_5(12),Sample_5(13),Sample_5(14),Sample_5(15),Sample_5(16),Sample_5(17),Sample_5(18),Sample_5(19),Sample_5(20),...
            Sample_5(21),Sample_5(22),Sample_5(23),Sample_5(24),Sample_5(25),Sample_5(26),Sample_5(27),Sample_5(28),Sample_5(29),Sample_5(30),Sample_5(31),Sample_5(32)] + ...
            [Sample_5(1)*random("Normal",0,sqrt(eps)),Sample_5(2)*random("Normal",0,sqrt(eps)),Sample_5(3)*random("Normal",0,sqrt(eps)), ...
            Sample_5(4)*random("Normal",0,sqrt(eps)),Sample_5(5)*random("Normal",0,sqrt(eps)),Sample_5(6)*random("Normal",0,sqrt(eps)), ...
            Sample_5(7)*random("Normal",0,sqrt(eps)),Sample_5(8)*random("Normal",0,sqrt(eps)),Sample_5(9)*random("Normal",0,sqrt(eps)),Sample_5(10)*random("Normal",0,sqrt(eps)), ...
            Sample_5(11)*random("Normal",0,sqrt(eps)),Sample_5(12)*random("Normal",0,sqrt(eps)),Sample_5(13)*random("Normal",0,sqrt(eps)),Sample_5(14)*random("Normal",0,sqrt(eps)),...
            Sample_5(15)*random("Normal",0,sqrt(eps)),Sample_5(16)*random("Normal",0,sqrt(eps)),Sample_5(17)*random("Normal",0,sqrt(eps)),Sample_5(18)*random("Normal",0,sqrt(eps)),...
            Sample_5(19)*random("Normal",0,sqrt(eps)),Sample_5(20)*random("Normal",0,sqrt(eps)),...
            Sample_5(21)*random("Normal",0,sqrt(eps)),Sample_5(22)*random("Normal",0,sqrt(eps)),Sample_5(23)*random("Normal",0,sqrt(eps)),Sample_5(24)*random("Normal",0,sqrt(eps)),...
            Sample_5(25)*random("Normal",0,sqrt(eps)),Sample_5(26)*random("Normal",0,sqrt(eps)),Sample_5(27)*random("Normal",0,sqrt(eps)),Sample_5(28)*random("Normal",0,sqrt(eps)),...
            Sample_5(29)*random("Normal",0,sqrt(eps)),Sample_5(30)*random("Normal",0,sqrt(eps)),Sample_5(31)*random("Normal",0,sqrt(eps)),Sample_5(32)*random("Normal",0,sqrt(eps))] ...
            ,j],'Data_16qubit.csv','WriteMode','append');
             
                    writematrix ([[Sample_6(1),Sample_6(2),Sample_6(3),Sample_6(4),Sample_6(5),Sample_6(6),Sample_6(7),Sample_6(8),Sample_6(9),Sample_6(10),Sample_6(11),Sample_6(12),Sample_6(13),Sample_6(14),Sample_6(15),Sample_6(16),Sample_6(17),Sample_6(18),Sample_6(19),Sample_6(20),...
            Sample_6(21),Sample_6(22),Sample_6(23),Sample_6(24),Sample_6(25),Sample_6(26),Sample_6(27),Sample_6(28),Sample_6(29),Sample_6(30),Sample_6(31),Sample_6(32)] + ...
            [Sample_6(1)*random("Normal",0,sqrt(eps)),Sample_6(2)*random("Normal",0,sqrt(eps)),Sample_6(3)*random("Normal",0,sqrt(eps)), ...
            Sample_6(4)*random("Normal",0,sqrt(eps)),Sample_6(5)*random("Normal",0,sqrt(eps)),Sample_6(6)*random("Normal",0,sqrt(eps)), ...
            Sample_6(7)*random("Normal",0,sqrt(eps)),Sample_6(8)*random("Normal",0,sqrt(eps)),Sample_6(9)*random("Normal",0,sqrt(eps)),Sample_6(10)*random("Normal",0,sqrt(eps)), ...
            Sample_6(11)*random("Normal",0,sqrt(eps)),Sample_6(12)*random("Normal",0,sqrt(eps)),Sample_6(13)*random("Normal",0,sqrt(eps)),Sample_6(14)*random("Normal",0,sqrt(eps)),...
            Sample_6(15)*random("Normal",0,sqrt(eps)),Sample_6(16)*random("Normal",0,sqrt(eps)),Sample_6(17)*random("Normal",0,sqrt(eps)),Sample_6(18)*random("Normal",0,sqrt(eps)),...
            Sample_6(19)*random("Normal",0,sqrt(eps)),Sample_6(20)*random("Normal",0,sqrt(eps)),...
            Sample_6(21)*random("Normal",0,sqrt(eps)),Sample_6(22)*random("Normal",0,sqrt(eps)),Sample_6(23)*random("Normal",0,sqrt(eps)),Sample_6(24)*random("Normal",0,sqrt(eps)),...
            Sample_6(25)*random("Normal",0,sqrt(eps)),Sample_6(26)*random("Normal",0,sqrt(eps)),Sample_6(27)*random("Normal",0,sqrt(eps)),Sample_6(28)*random("Normal",0,sqrt(eps)),...
            Sample_6(29)*random("Normal",0,sqrt(eps)),Sample_6(30)*random("Normal",0,sqrt(eps)),Sample_6(31)*random("Normal",0,sqrt(eps)),Sample_6(32)*random("Normal",0,sqrt(eps))] ...
            ,j],'Data_16qubit.csv','WriteMode','append');


                    writematrix ([[Sample_7(1),Sample_7(2),Sample_7(3),Sample_7(4),Sample_7(5),Sample_7(6),Sample_7(7),Sample_7(8),Sample_7(9),Sample_7(10),Sample_7(11),Sample_7(12),Sample_7(13),Sample_7(14),Sample_7(15),Sample_7(16),Sample_7(17),Sample_7(18),Sample_7(19),Sample_7(20),...
            Sample_7(21),Sample_7(22),Sample_7(23),Sample_7(24),Sample_7(25),Sample_7(26),Sample_7(27),Sample_7(28),Sample_7(29),Sample_7(30),Sample_7(31),Sample_7(32)] + ...
            [Sample_7(1)*random("Normal",0,sqrt(eps)),Sample_7(2)*random("Normal",0,sqrt(eps)),Sample_7(3)*random("Normal",0,sqrt(eps)), ...
            Sample_7(4)*random("Normal",0,sqrt(eps)),Sample_7(5)*random("Normal",0,sqrt(eps)),Sample_7(6)*random("Normal",0,sqrt(eps)), ...
            Sample_7(7)*random("Normal",0,sqrt(eps)),Sample_7(8)*random("Normal",0,sqrt(eps)),Sample_7(9)*random("Normal",0,sqrt(eps)),Sample_7(10)*random("Normal",0,sqrt(eps)), ...
            Sample_7(11)*random("Normal",0,sqrt(eps)),Sample_7(12)*random("Normal",0,sqrt(eps)),Sample_7(13)*random("Normal",0,sqrt(eps)),Sample_7(14)*random("Normal",0,sqrt(eps)),...
            Sample_7(15)*random("Normal",0,sqrt(eps)),Sample_7(16)*random("Normal",0,sqrt(eps)),Sample_7(17)*random("Normal",0,sqrt(eps)),Sample_7(18)*random("Normal",0,sqrt(eps)),...
            Sample_7(19)*random("Normal",0,sqrt(eps)),Sample_7(20)*random("Normal",0,sqrt(eps)),...
            Sample_7(21)*random("Normal",0,sqrt(eps)),Sample_7(22)*random("Normal",0,sqrt(eps)),Sample_7(23)*random("Normal",0,sqrt(eps)),Sample_7(24)*random("Normal",0,sqrt(eps)),...
            Sample_7(25)*random("Normal",0,sqrt(eps)),Sample_7(26)*random("Normal",0,sqrt(eps)),Sample_7(27)*random("Normal",0,sqrt(eps)),Sample_7(28)*random("Normal",0,sqrt(eps)),...
            Sample_7(29)*random("Normal",0,sqrt(eps)),Sample_7(30)*random("Normal",0,sqrt(eps)),Sample_7(31)*random("Normal",0,sqrt(eps)),Sample_7(32)*random("Normal",0,sqrt(eps))] ...
            ,j],'Data_16qubit.csv','WriteMode','append');

                    writematrix ([[Sample_8(1),Sample_8(2),Sample_8(3),Sample_8(4),Sample_8(5),Sample_8(6),Sample_8(7),Sample_8(8),Sample_8(9),Sample_8(10),Sample_8(11),Sample_8(12),Sample_8(13),Sample_8(14),Sample_8(15),Sample_8(16),Sample_8(17),Sample_8(18),Sample_8(19),Sample_8(20),...
            Sample_8(21),Sample_8(22),Sample_8(23),Sample_8(24),Sample_8(25),Sample_8(26),Sample_8(27),Sample_8(28),Sample_8(29),Sample_8(30),Sample_8(31),Sample_8(32)] + ...
            [Sample_8(1)*random("Normal",0,sqrt(eps)),Sample_8(2)*random("Normal",0,sqrt(eps)),Sample_8(3)*random("Normal",0,sqrt(eps)), ...
            Sample_8(4)*random("Normal",0,sqrt(eps)),Sample_8(5)*random("Normal",0,sqrt(eps)),Sample_8(6)*random("Normal",0,sqrt(eps)), ...
            Sample_8(7)*random("Normal",0,sqrt(eps)),Sample_8(8)*random("Normal",0,sqrt(eps)),Sample_8(9)*random("Normal",0,sqrt(eps)),Sample_8(10)*random("Normal",0,sqrt(eps)), ...
            Sample_8(11)*random("Normal",0,sqrt(eps)),Sample_8(12)*random("Normal",0,sqrt(eps)),Sample_8(13)*random("Normal",0,sqrt(eps)),Sample_8(14)*random("Normal",0,sqrt(eps)),...
            Sample_8(15)*random("Normal",0,sqrt(eps)),Sample_8(16)*random("Normal",0,sqrt(eps)),Sample_8(17)*random("Normal",0,sqrt(eps)),Sample_8(18)*random("Normal",0,sqrt(eps)),...
            Sample_8(19)*random("Normal",0,sqrt(eps)),Sample_8(20)*random("Normal",0,sqrt(eps)),...
            Sample_8(21)*random("Normal",0,sqrt(eps)),Sample_8(22)*random("Normal",0,sqrt(eps)),Sample_8(23)*random("Normal",0,sqrt(eps)),Sample_8(24)*random("Normal",0,sqrt(eps)),...
            Sample_8(25)*random("Normal",0,sqrt(eps)),Sample_8(26)*random("Normal",0,sqrt(eps)),Sample_8(27)*random("Normal",0,sqrt(eps)),Sample_8(28)*random("Normal",0,sqrt(eps)),...
            Sample_8(29)*random("Normal",0,sqrt(eps)),Sample_8(30)*random("Normal",0,sqrt(eps)),Sample_8(31)*random("Normal",0,sqrt(eps)),Sample_8(32)*random("Normal",0,sqrt(eps))] ...
            ,j],'Data_16qubit.csv','WriteMode','append');

                    writematrix ([[Sample_9(1),Sample_9(2),Sample_9(3),Sample_9(4),Sample_9(5),Sample_9(6),Sample_9(7),Sample_9(8),Sample_9(9),Sample_9(10),Sample_9(11),Sample_9(12),Sample_9(13),Sample_9(14),Sample_9(15),Sample_9(16),Sample_9(17),Sample_9(18),Sample_9(19),Sample_9(20),...
            Sample_9(21),Sample_9(22),Sample_9(23),Sample_9(24),Sample_9(25),Sample_9(26),Sample_9(27),Sample_9(28),Sample_9(29),Sample_9(30),Sample_9(31),Sample_9(32)] + ...
            [Sample_9(1)*random("Normal",0,sqrt(eps)),Sample_9(2)*random("Normal",0,sqrt(eps)),Sample_9(3)*random("Normal",0,sqrt(eps)), ...
            Sample_9(4)*random("Normal",0,sqrt(eps)),Sample_9(5)*random("Normal",0,sqrt(eps)),Sample_9(6)*random("Normal",0,sqrt(eps)), ...
            Sample_9(7)*random("Normal",0,sqrt(eps)),Sample_9(8)*random("Normal",0,sqrt(eps)),Sample_9(9)*random("Normal",0,sqrt(eps)),Sample_9(10)*random("Normal",0,sqrt(eps)), ...
            Sample_9(11)*random("Normal",0,sqrt(eps)),Sample_9(12)*random("Normal",0,sqrt(eps)),Sample_9(13)*random("Normal",0,sqrt(eps)),Sample_9(14)*random("Normal",0,sqrt(eps)),...
            Sample_9(15)*random("Normal",0,sqrt(eps)),Sample_9(16)*random("Normal",0,sqrt(eps)),Sample_9(17)*random("Normal",0,sqrt(eps)),Sample_9(18)*random("Normal",0,sqrt(eps)),...
            Sample_9(19)*random("Normal",0,sqrt(eps)),Sample_9(20)*random("Normal",0,sqrt(eps)),...
            Sample_9(21)*random("Normal",0,sqrt(eps)),Sample_9(22)*random("Normal",0,sqrt(eps)),Sample_9(23)*random("Normal",0,sqrt(eps)),Sample_9(24)*random("Normal",0,sqrt(eps)),...
            Sample_9(25)*random("Normal",0,sqrt(eps)),Sample_9(26)*random("Normal",0,sqrt(eps)),Sample_9(27)*random("Normal",0,sqrt(eps)),Sample_9(28)*random("Normal",0,sqrt(eps)),...
            Sample_9(29)*random("Normal",0,sqrt(eps)),Sample_9(30)*random("Normal",0,sqrt(eps)),Sample_9(31)*random("Normal",0,sqrt(eps)),Sample_9(32)*random("Normal",0,sqrt(eps))] ...
            ,j],'Data_16qubit.csv','WriteMode','append');
            
                    writematrix ([[Sample_10(1),Sample_10(2),Sample_10(3),Sample_10(4),Sample_10(5),Sample_10(6),Sample_10(7),Sample_10(8),Sample_10(9),Sample_10(10),Sample_10(11),Sample_10(12),Sample_10(13),Sample_10(14),Sample_10(15),Sample_10(16),Sample_10(17),Sample_10(18),Sample_10(19),Sample_10(20),...
            Sample_10(21),Sample_10(22),Sample_10(23),Sample_10(24),Sample_10(25),Sample_10(26),Sample_10(27),Sample_10(28),Sample_10(29),Sample_10(30),Sample_10(31),Sample_10(32)] + ...
            [Sample_10(1)*random("Normal",0,sqrt(eps)),Sample_10(2)*random("Normal",0,sqrt(eps)),Sample_10(3)*random("Normal",0,sqrt(eps)), ...
            Sample_10(4)*random("Normal",0,sqrt(eps)),Sample_10(5)*random("Normal",0,sqrt(eps)),Sample_10(6)*random("Normal",0,sqrt(eps)), ...
            Sample_10(7)*random("Normal",0,sqrt(eps)),Sample_10(8)*random("Normal",0,sqrt(eps)),Sample_10(9)*random("Normal",0,sqrt(eps)),Sample_10(10)*random("Normal",0,sqrt(eps)), ...
            Sample_10(11)*random("Normal",0,sqrt(eps)),Sample_10(12)*random("Normal",0,sqrt(eps)),Sample_10(13)*random("Normal",0,sqrt(eps)),Sample_10(14)*random("Normal",0,sqrt(eps)),...
            Sample_10(15)*random("Normal",0,sqrt(eps)),Sample_10(16)*random("Normal",0,sqrt(eps)),Sample_10(17)*random("Normal",0,sqrt(eps)),Sample_10(18)*random("Normal",0,sqrt(eps)),...
            Sample_10(19)*random("Normal",0,sqrt(eps)),Sample_10(20)*random("Normal",0,sqrt(eps)),...
            Sample_10(21)*random("Normal",0,sqrt(eps)),Sample_10(22)*random("Normal",0,sqrt(eps)),Sample_10(23)*random("Normal",0,sqrt(eps)),Sample_10(24)*random("Normal",0,sqrt(eps)),...
            Sample_10(25)*random("Normal",0,sqrt(eps)),Sample_10(26)*random("Normal",0,sqrt(eps)),Sample_10(27)*random("Normal",0,sqrt(eps)),Sample_10(28)*random("Normal",0,sqrt(eps)),...
            Sample_10(29)*random("Normal",0,sqrt(eps)),Sample_10(30)*random("Normal",0,sqrt(eps)),Sample_10(31)*random("Normal",0,sqrt(eps)),Sample_10(32)*random("Normal",0,sqrt(eps))] ...
            ,j],'Data_16qubit.csv','WriteMode','append');


                     writematrix ([[Sample_11(1),Sample_11(2),Sample_11(3),Sample_11(4),Sample_11(5),Sample_11(6),Sample_11(7),Sample_11(8),Sample_11(9),Sample_11(10),Sample_11(11),Sample_11(12),Sample_11(13),Sample_11(14),Sample_11(15),Sample_11(16),Sample_11(17),Sample_11(18),Sample_11(19),Sample_11(20),...
            Sample_11(21),Sample_11(22),Sample_11(23),Sample_11(24),Sample_11(25),Sample_11(26),Sample_11(27),Sample_11(28),Sample_11(29),Sample_11(30),Sample_11(31),Sample_11(32)] + ...
            [Sample_11(1)*random("Normal",0,sqrt(eps)),Sample_11(2)*random("Normal",0,sqrt(eps)),Sample_11(3)*random("Normal",0,sqrt(eps)), ...
            Sample_11(4)*random("Normal",0,sqrt(eps)),Sample_11(5)*random("Normal",0,sqrt(eps)),Sample_11(6)*random("Normal",0,sqrt(eps)), ...
            Sample_11(7)*random("Normal",0,sqrt(eps)),Sample_11(8)*random("Normal",0,sqrt(eps)),Sample_11(9)*random("Normal",0,sqrt(eps)),Sample_11(10)*random("Normal",0,sqrt(eps)), ...
            Sample_11(11)*random("Normal",0,sqrt(eps)),Sample_11(12)*random("Normal",0,sqrt(eps)),Sample_11(13)*random("Normal",0,sqrt(eps)),Sample_11(14)*random("Normal",0,sqrt(eps)),...
            Sample_11(15)*random("Normal",0,sqrt(eps)),Sample_11(16)*random("Normal",0,sqrt(eps)),Sample_11(17)*random("Normal",0,sqrt(eps)),Sample_11(18)*random("Normal",0,sqrt(eps)),...
            Sample_11(19)*random("Normal",0,sqrt(eps)),Sample_11(20)*random("Normal",0,sqrt(eps)),...
            Sample_11(21)*random("Normal",0,sqrt(eps)),Sample_11(22)*random("Normal",0,sqrt(eps)),Sample_11(23)*random("Normal",0,sqrt(eps)),Sample_11(24)*random("Normal",0,sqrt(eps)),...
            Sample_11(25)*random("Normal",0,sqrt(eps)),Sample_11(26)*random("Normal",0,sqrt(eps)),Sample_11(27)*random("Normal",0,sqrt(eps)),Sample_11(28)*random("Normal",0,sqrt(eps)),...
            Sample_11(29)*random("Normal",0,sqrt(eps)),Sample_11(30)*random("Normal",0,sqrt(eps)),Sample_11(31)*random("Normal",0,sqrt(eps)),Sample_11(32)*random("Normal",0,sqrt(eps))] ...
            ,j],'Data_16qubit.csv','WriteMode','append');

                     writematrix ([[Sample_12(1),Sample_12(2),Sample_12(3),Sample_12(4),Sample_12(5),Sample_12(6),Sample_12(7),Sample_12(8),Sample_12(9),Sample_12(10),Sample_12(11),Sample_12(12),Sample_12(13),Sample_12(14),Sample_12(15),Sample_12(16),Sample_12(17),Sample_12(18),Sample_12(19),Sample_12(20),...
            Sample_12(21),Sample_12(22),Sample_12(23),Sample_12(24),Sample_12(25),Sample_12(26),Sample_12(27),Sample_12(28),Sample_12(29),Sample_12(30),Sample_12(31),Sample_12(32)] + ...
            [Sample_12(1)*random("Normal",0,sqrt(eps)),Sample_12(2)*random("Normal",0,sqrt(eps)),Sample_12(3)*random("Normal",0,sqrt(eps)), ...
            Sample_12(4)*random("Normal",0,sqrt(eps)),Sample_12(5)*random("Normal",0,sqrt(eps)),Sample_12(6)*random("Normal",0,sqrt(eps)), ...
            Sample_12(7)*random("Normal",0,sqrt(eps)),Sample_12(8)*random("Normal",0,sqrt(eps)),Sample_12(9)*random("Normal",0,sqrt(eps)),Sample_12(10)*random("Normal",0,sqrt(eps)), ...
            Sample_12(11)*random("Normal",0,sqrt(eps)),Sample_12(12)*random("Normal",0,sqrt(eps)),Sample_12(13)*random("Normal",0,sqrt(eps)),Sample_12(14)*random("Normal",0,sqrt(eps)),...
            Sample_12(15)*random("Normal",0,sqrt(eps)),Sample_12(16)*random("Normal",0,sqrt(eps)),Sample_12(17)*random("Normal",0,sqrt(eps)),Sample_12(18)*random("Normal",0,sqrt(eps)),...
            Sample_12(19)*random("Normal",0,sqrt(eps)),Sample_12(20)*random("Normal",0,sqrt(eps)),...
            Sample_12(21)*random("Normal",0,sqrt(eps)),Sample_12(22)*random("Normal",0,sqrt(eps)),Sample_12(23)*random("Normal",0,sqrt(eps)),Sample_12(24)*random("Normal",0,sqrt(eps)),...
            Sample_12(25)*random("Normal",0,sqrt(eps)),Sample_12(26)*random("Normal",0,sqrt(eps)),Sample_12(27)*random("Normal",0,sqrt(eps)),Sample_12(28)*random("Normal",0,sqrt(eps)),...
            Sample_12(29)*random("Normal",0,sqrt(eps)),Sample_12(30)*random("Normal",0,sqrt(eps)),Sample_12(31)*random("Normal",0,sqrt(eps)),Sample_12(32)*random("Normal",0,sqrt(eps))] ...
            ,j],'Data_16qubit.csv','WriteMode','append');

                     writematrix ([[Sample_13(1),Sample_13(2),Sample_13(3),Sample_13(4),Sample_13(5),Sample_13(6),Sample_13(7),Sample_13(8),Sample_13(9),Sample_13(10),Sample_13(11),Sample_13(12),Sample_13(13),Sample_13(14),Sample_13(15),Sample_13(16),Sample_13(17),Sample_13(18),Sample_13(19),Sample_13(20),...
            Sample_13(21),Sample_13(22),Sample_13(23),Sample_13(24),Sample_13(25),Sample_13(26),Sample_13(27),Sample_13(28),Sample_13(29),Sample_13(30),Sample_13(31),Sample_13(32)] + ...
            [Sample_13(1)*random("Normal",0,sqrt(eps)),Sample_13(2)*random("Normal",0,sqrt(eps)),Sample_13(3)*random("Normal",0,sqrt(eps)), ...
            Sample_13(4)*random("Normal",0,sqrt(eps)),Sample_13(5)*random("Normal",0,sqrt(eps)),Sample_13(6)*random("Normal",0,sqrt(eps)), ...
            Sample_13(7)*random("Normal",0,sqrt(eps)),Sample_13(8)*random("Normal",0,sqrt(eps)),Sample_13(9)*random("Normal",0,sqrt(eps)),Sample_13(10)*random("Normal",0,sqrt(eps)), ...
            Sample_13(11)*random("Normal",0,sqrt(eps)),Sample_13(12)*random("Normal",0,sqrt(eps)),Sample_13(13)*random("Normal",0,sqrt(eps)),Sample_13(14)*random("Normal",0,sqrt(eps)),...
            Sample_13(15)*random("Normal",0,sqrt(eps)),Sample_13(16)*random("Normal",0,sqrt(eps)),Sample_13(17)*random("Normal",0,sqrt(eps)),Sample_13(18)*random("Normal",0,sqrt(eps)),...
            Sample_13(19)*random("Normal",0,sqrt(eps)),Sample_13(20)*random("Normal",0,sqrt(eps)),...
            Sample_13(21)*random("Normal",0,sqrt(eps)),Sample_13(22)*random("Normal",0,sqrt(eps)),Sample_13(23)*random("Normal",0,sqrt(eps)),Sample_13(24)*random("Normal",0,sqrt(eps)),...
            Sample_13(25)*random("Normal",0,sqrt(eps)),Sample_13(26)*random("Normal",0,sqrt(eps)),Sample_13(27)*random("Normal",0,sqrt(eps)),Sample_13(28)*random("Normal",0,sqrt(eps)),...
            Sample_13(29)*random("Normal",0,sqrt(eps)),Sample_13(30)*random("Normal",0,sqrt(eps)),Sample_13(31)*random("Normal",0,sqrt(eps)),Sample_13(32)*random("Normal",0,sqrt(eps))] ...
            ,j],'Data_16qubit.csv','WriteMode','append');

                     writematrix ([[Sample_14(1),Sample_14(2),Sample_14(3),Sample_14(4),Sample_14(5),Sample_14(6),Sample_14(7),Sample_14(8),Sample_14(9),Sample_14(10),Sample_14(11),Sample_14(12),Sample_14(13),Sample_14(14),Sample_14(15),Sample_14(16),Sample_14(17),Sample_14(18),Sample_14(19),Sample_14(20),...
            Sample_14(21),Sample_14(22),Sample_14(23),Sample_14(24),Sample_14(25),Sample_14(26),Sample_14(27),Sample_14(28),Sample_14(29),Sample_14(30),Sample_14(31),Sample_14(32)] + ...
            [Sample_14(1)*random("Normal",0,sqrt(eps)),Sample_14(2)*random("Normal",0,sqrt(eps)),Sample_14(3)*random("Normal",0,sqrt(eps)), ...
            Sample_14(4)*random("Normal",0,sqrt(eps)),Sample_14(5)*random("Normal",0,sqrt(eps)),Sample_14(6)*random("Normal",0,sqrt(eps)), ...
            Sample_14(7)*random("Normal",0,sqrt(eps)),Sample_14(8)*random("Normal",0,sqrt(eps)),Sample_14(9)*random("Normal",0,sqrt(eps)),Sample_14(10)*random("Normal",0,sqrt(eps)), ...
            Sample_14(11)*random("Normal",0,sqrt(eps)),Sample_14(12)*random("Normal",0,sqrt(eps)),Sample_14(13)*random("Normal",0,sqrt(eps)),Sample_14(14)*random("Normal",0,sqrt(eps)),...
            Sample_14(15)*random("Normal",0,sqrt(eps)),Sample_14(16)*random("Normal",0,sqrt(eps)),Sample_14(17)*random("Normal",0,sqrt(eps)),Sample_14(18)*random("Normal",0,sqrt(eps)),...
            Sample_14(19)*random("Normal",0,sqrt(eps)),Sample_14(20)*random("Normal",0,sqrt(eps)),...
            Sample_14(21)*random("Normal",0,sqrt(eps)),Sample_14(22)*random("Normal",0,sqrt(eps)),Sample_14(23)*random("Normal",0,sqrt(eps)),Sample_14(24)*random("Normal",0,sqrt(eps)),...
            Sample_14(25)*random("Normal",0,sqrt(eps)),Sample_14(26)*random("Normal",0,sqrt(eps)),Sample_14(27)*random("Normal",0,sqrt(eps)),Sample_14(28)*random("Normal",0,sqrt(eps)),...
            Sample_14(29)*random("Normal",0,sqrt(eps)),Sample_14(30)*random("Normal",0,sqrt(eps)),Sample_14(31)*random("Normal",0,sqrt(eps)),Sample_14(32)*random("Normal",0,sqrt(eps))] ...
            ,j],'Data_16qubit.csv','WriteMode','append');

                    writematrix ([[Sample_15(1),Sample_15(2),Sample_15(3),Sample_15(4),Sample_15(5),Sample_15(6),Sample_15(7),Sample_15(8),Sample_15(9),Sample_15(10),Sample_15(11),Sample_15(12),Sample_15(13),Sample_15(14),Sample_15(15),Sample_15(16),Sample_15(17),Sample_15(18),Sample_15(19),Sample_15(20),...
            Sample_15(21),Sample_15(22),Sample_15(23),Sample_15(24),Sample_15(25),Sample_15(26),Sample_15(27),Sample_15(28),Sample_15(29),Sample_15(30),Sample_15(31),Sample_15(32)] + ...
            [Sample_15(1)*random("Normal",0,sqrt(eps)),Sample_15(2)*random("Normal",0,sqrt(eps)),Sample_15(3)*random("Normal",0,sqrt(eps)), ...
            Sample_15(4)*random("Normal",0,sqrt(eps)),Sample_15(5)*random("Normal",0,sqrt(eps)),Sample_15(6)*random("Normal",0,sqrt(eps)), ...
            Sample_15(7)*random("Normal",0,sqrt(eps)),Sample_15(8)*random("Normal",0,sqrt(eps)),Sample_15(9)*random("Normal",0,sqrt(eps)),Sample_15(10)*random("Normal",0,sqrt(eps)), ...
            Sample_15(11)*random("Normal",0,sqrt(eps)),Sample_15(12)*random("Normal",0,sqrt(eps)),Sample_15(13)*random("Normal",0,sqrt(eps)),Sample_15(14)*random("Normal",0,sqrt(eps)),...
            Sample_15(15)*random("Normal",0,sqrt(eps)),Sample_15(16)*random("Normal",0,sqrt(eps)),Sample_15(17)*random("Normal",0,sqrt(eps)),Sample_15(18)*random("Normal",0,sqrt(eps)),...
            Sample_15(19)*random("Normal",0,sqrt(eps)),Sample_15(20)*random("Normal",0,sqrt(eps)),...
            Sample_15(21)*random("Normal",0,sqrt(eps)),Sample_15(22)*random("Normal",0,sqrt(eps)),Sample_15(23)*random("Normal",0,sqrt(eps)),Sample_15(24)*random("Normal",0,sqrt(eps)),...
            Sample_15(25)*random("Normal",0,sqrt(eps)),Sample_15(26)*random("Normal",0,sqrt(eps)),Sample_15(27)*random("Normal",0,sqrt(eps)),Sample_15(28)*random("Normal",0,sqrt(eps)),...
            Sample_15(29)*random("Normal",0,sqrt(eps)),Sample_15(30)*random("Normal",0,sqrt(eps)),Sample_15(31)*random("Normal",0,sqrt(eps)),Sample_15(32)*random("Normal",0,sqrt(eps))] ...
            ,j],'Data_16qubit.csv','WriteMode','append');
    end
 end  
end

end



%------------------------------------------------------------------------
% DxD_Euler_angles : Caluclates the Euler angles for a SU(4) = DxD matitx
%------------------------------------------------------------------------
function angles = DxD_Euler_angles (M)

%M is SU(4)
I= [ 1 0 0 0 
     0 1 0 0 
     0 0 1 0 
     0 0 0 1 ];
 if norm(M*M'-I) >= 0.001    % not U4
     angles=[0 0 0 0];
     return
 elseif det(M)-1 >= 0.001  % not SU(4)
     angles = [0 0 0 0];
     return
 end
         

% Using M explicit expressions 
% M(1,2)= -cos(theta_1/2)*sin(theta_3/2)*exp(-(theta_2*1i)/2)*exp((theta_4*1i)/2)*1i;
% M(1,1) = cos(theta_1/2)*cos(theta_3/2)*exp(-(theta_2*1i)/2)*exp(-(theta_4*1i)/2); 
theta_3 =   2*atan( abs(M(1,2)/M(1,1)) );

% M(1,4) = -sin(theta_1/2)*sin(theta_3/2)*exp((theta_2*1i)/2)*exp((theta_4*1i)/2);
% M(2,1) = -cos(theta_1/2)*sin(theta_3/2)*exp(-(theta_2*1i)/2)*exp(-(theta_4*1i)/2)*1i; 
theta_1 =   2*atan( abs(M(1,4)/M(2,1)) );

% M(2,2)= cos(theta_1/2)*cos(theta_3/2)*exp(-(theta_2*1i)/2)*exp((theta_4*1i)/2);
% M(1,1) = cos(theta_1/2)*cos(theta_3/2)*exp(-(theta_2*1i)/2)*exp(-(theta_4*1i)/2);
theta_4 =  angle(M(2,2)) - angle (M (1,1));

% M(1,4) = -sin(theta_1/2)*sin(theta_3/2)*exp((theta_2*1i)/2)*exp((theta_4*1i)/2);
% M(2,3) = -sin(theta_1/2)*sin(theta_3/2)*exp((theta_2*1i)/2)*exp(-(theta_4*1i)/2);
theta_2 = angle(M(1,4)) + angle(M(2,3));

%Angle correction to [-pi/2, pi/2]
if theta_2 >= 3*pi/4
    theta_2 = 2*pi - theta_2;
end
if theta_2 <= -3*pi/4
    theta_2 = 2*pi + theta_2;
end


% Angle correction to [-pi/2,pi/2]
% M(1,2)= -cos(theta_1/2)*sin(theta_3/2)*exp(-(theta_2*1i)/2)*exp((theta_4*1i)/2)*1i;
if  M(1,2)/(exp(-(theta_2*1i)/2)*exp((theta_4*1i)/2)*1i) >= 0.0
    if theta_3 >= 0.0
       theta_3 = -theta_3;
    end
end

% Angle correction to [-pi/2,pi/2]
% M(1,3) = -cos(theta_3/2)*sin(theta_1/2)*exp((theta_2*1i)/2)*exp(-(theta_4*1i)/2)*1i;
if M(1,3)/( exp((theta_2*1i)/2)*exp(-(theta_4*1i)/2)*1i ) >= 0.0
    if theta_1 >= 0.0
       theta_1 = -theta_1;
    end
end
    
% M(1,1) = cos(theta_1/2)*cos(theta_3/2)*exp(-(theta_2*1i)/2)*exp(-(theta_4*1i)/2); 
if abs(M(1,1) - cos(theta_1/2)*cos(theta_3/2)*exp(-(theta_2*1i)/2)*exp(-(theta_4*1i)/2)) >= 0.001
    theta_2 = -theta_2;
end

%Return results
angles = [theta_1 theta_2 theta_3 theta_4 ];


end



%-------------------------------------------------------------------------
%  D : returns the product of the exponentials of the three square matrices
%      A1, A2, A3 and A4  as  D = exp(-ia1A1/2)*exp(-ia2A2/2)*exp(-ia3A3/2)
%      *exp(-ia4A4/2)
%-------------------------------------------------------------------------
function M = D (angles, A1, A2, A3, A4)
    % Use of matrix exponentials 
    M =  expm(-1i*angles(1)*A1/2)...
        *expm(-1i*angles(2)*A2/2)...
        *expm(-1i*angles(3)*A3/2)...
        *expm(-1i*angles(4)*A4/2);
end
